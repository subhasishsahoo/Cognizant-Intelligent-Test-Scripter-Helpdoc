{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Cognizant Intelligent Test Scripter\n#\n\n\n\n\n\n\nCognizant Intelligent Test Scripter\n is an open-source script-less test automation solution that provides a unified interface for all the \nday-to-day\n test automation activities such as test design, test development, test execution, reporting and maintenance.\n\n\n\n\n\n\nFeatures\n#\n\n\n\n\n\n\nWeb automation with multi browser support using \nSelenium\n\n\n\n\n\n\nImage based automation using \nSikuli\n\n\n\n\n\n\nReusable components for \nreusing scripts\n\n\n\n\n\n\nTest-data parameterisation  and environment-based dynamic test-data\n support \n\n\n\n\n\n\nObject Repository\n supporting Object Group in Web and Mobile\n\n\n\n\n\n\nExploratory Testing\n that records flow, takes screen shots, uploads bugs and converts recorded steps into test cases\n\n\n\n\n\n\nExecution in cloud platforms like \nSauceLabs\n, \nBrowserStack\n, \nPerfecto\n\n\n\n\n\n\nLayout Testing\n using \nGalen framework\n\n\n\n\n\n\nAccessibility Testing\n using \naXe\n\n\n\n\n\n\nReusable / iteration / browser level HTML(json) report with \nSearching, Sorting, Grouping, Themes, Templates, Galen Image comparison\n features\n\n\n\n\n\n\nValidation, Re factoring , Search in all components(Testcase/Reusable/TestData/TestSet/OR)\n\n\n\n\n\n\nSelenium grid\n support and  \nGridNode UI\n for creating grid clients\n\n\n\n\n\n\nAppium\n Integration for Mobile web Automation\n\n\n\n\n\n\nObject Spy For MobileNative Apps[IOS and Android]  \n\n\n\n\n\n\nTest Management module(QC , JIRA-Zephyr , TFS)\n\n\n\n\n\n\nSend Reports in mail after Execution\n\n\n\n\n\n\nExecute failed testcases in a test set automatically after a run\n\n\n\n\n\n\nCustom methods,externalize the custom actions/methods as separate project\n\n\n\n\n\n\nCLI to support multiple switches and command line variables\n\n\n\n\n\n\nUtility(Feature Editor) to manage BDD features, support Feature file creation, import, export feature files\n\n\n\n\n\n\nWebPage performance metrics\n - Page and Resource timings report, Har Compare and  Har Compare report ,CLI to get performance result/report for an execution\n\n\n\n\n\n\nAngular support using \nng-webdriver(protractor)\n\n\n\n\n\n\nDownload\n#\n\n\nYou can download the Latest version of Cognizant Intelligent Test Scripter \nfrom the Releases\n.  After extracting the zip, follow the steps from \nInstallation.md\n\n\n\n\nNote\n\n\nCognizant Intelligent Test Scripter is distributed under \nApache License 2.0\n and the sources are available on \nGitHub\n.\n\n\n\n\n\n\nNote\n\n\nThis website is also posted on \nGitHub\n as open-source so that anyone can help improve the documentation.\n\n\n\n\nPrerequisites\n#\n\n\nHardware Requirements\n#\n\n\n\n\nRAM: 2GB preferably 4 GB\n\n\nProcessor: Pentium 4 or faster\n\n\nOperating System: Windows (32/64 bit)/ MAC OS/Linux\n\n\n\n\n\n\nNote\n\n\nCognizant Intelligent Test Scripter is built on Java. Hence it will work on any desktop OS which supports Java.\n\n\n\n\nSoftware Requirements\n#\n\n\n\n\nLatest Java 1.8 or higher\n\n\nIDE supporting Java Development (Eclipse, Netbeans, etc.)\n\n\n\n\nDevices(For mobile execution)\n#\n\n\n\n\nAll Android based devices\n\n\nAll iOS based devices\n\n\n\n\nSupported Browsers\n#\n\n\nSelenium supported browsers are covered by default. For more information, \nrefer the link\n.\n\n\nContact\n#\n\n\nIf you have any queries on Cognizant Intelligent Test Scripter, please post your questions on \nCognizant ITS Google Group\n.\n\n\nTo ask specific questions on project development, to discuss future improvements or for any other technical detail, please join the \nCognizant ITS chat on Gitter\n.", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#cognizant-intelligent-test-scripter", 
            "text": "Cognizant Intelligent Test Scripter  is an open-source script-less test automation solution that provides a unified interface for all the  day-to-day  test automation activities such as test design, test development, test execution, reporting and maintenance.", 
            "title": "Cognizant Intelligent Test Scripter"
        }, 
        {
            "location": "/index.html#features", 
            "text": "Web automation with multi browser support using  Selenium    Image based automation using  Sikuli    Reusable components for  reusing scripts    Test-data parameterisation  and environment-based dynamic test-data  support     Object Repository  supporting Object Group in Web and Mobile    Exploratory Testing  that records flow, takes screen shots, uploads bugs and converts recorded steps into test cases    Execution in cloud platforms like  SauceLabs ,  BrowserStack ,  Perfecto    Layout Testing  using  Galen framework    Accessibility Testing  using  aXe    Reusable / iteration / browser level HTML(json) report with  Searching, Sorting, Grouping, Themes, Templates, Galen Image comparison  features    Validation, Re factoring , Search in all components(Testcase/Reusable/TestData/TestSet/OR)    Selenium grid  support and   GridNode UI  for creating grid clients    Appium  Integration for Mobile web Automation    Object Spy For MobileNative Apps[IOS and Android]      Test Management module(QC , JIRA-Zephyr , TFS)    Send Reports in mail after Execution    Execute failed testcases in a test set automatically after a run    Custom methods,externalize the custom actions/methods as separate project    CLI to support multiple switches and command line variables    Utility(Feature Editor) to manage BDD features, support Feature file creation, import, export feature files    WebPage performance metrics  - Page and Resource timings report, Har Compare and  Har Compare report ,CLI to get performance result/report for an execution    Angular support using  ng-webdriver(protractor)", 
            "title": "Features"
        }, 
        {
            "location": "/index.html#download", 
            "text": "You can download the Latest version of Cognizant Intelligent Test Scripter  from the Releases .  After extracting the zip, follow the steps from  Installation.md   Note  Cognizant Intelligent Test Scripter is distributed under  Apache License 2.0  and the sources are available on  GitHub .    Note  This website is also posted on  GitHub  as open-source so that anyone can help improve the documentation.", 
            "title": "Download"
        }, 
        {
            "location": "/index.html#prerequisites", 
            "text": "", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/index.html#hardware-requirements", 
            "text": "RAM: 2GB preferably 4 GB  Processor: Pentium 4 or faster  Operating System: Windows (32/64 bit)/ MAC OS/Linux    Note  Cognizant Intelligent Test Scripter is built on Java. Hence it will work on any desktop OS which supports Java.", 
            "title": "Hardware Requirements"
        }, 
        {
            "location": "/index.html#software-requirements", 
            "text": "Latest Java 1.8 or higher  IDE supporting Java Development (Eclipse, Netbeans, etc.)", 
            "title": "Software Requirements"
        }, 
        {
            "location": "/index.html#devicesfor-mobile-execution", 
            "text": "All Android based devices  All iOS based devices", 
            "title": "Devices(For mobile execution)"
        }, 
        {
            "location": "/index.html#supported-browsers", 
            "text": "Selenium supported browsers are covered by default. For more information,  refer the link .", 
            "title": "Supported Browsers"
        }, 
        {
            "location": "/index.html#contact", 
            "text": "If you have any queries on Cognizant Intelligent Test Scripter, please post your questions on  Cognizant ITS Google Group .  To ask specific questions on project development, to discuss future improvements or for any other technical detail, please join the  Cognizant ITS chat on Gitter .", 
            "title": "Contact"
        }, 
        {
            "location": "/actions/webactions/index.html", 
            "text": "Web Actions\n#\n\n\nBasic\n#\n\n\nSet\n#\n\n\nDescription\n: This function is used to enter data in an object.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nInputs in the Input column can be either \nhardcoded\n (in this case the data is preceded by a \"\n@\n\"), passed from the data sheet (\ndatasheet name : column name\n) or passed from a variable value (\n%variable name%\n), as given in the above example.\n\n\nClick\n#\n\n\nDescription\n: This function is used to perform click operation on an object.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nrightClick\n#\n\n\nDescription\n: This function is used to perform right click operation on an object or in the browser.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nSubmitIfExists\n#\n\n\nDescription\n: This function will check if an object exists. If the object exists, it will submit else it will ignore that step.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nRestartBrowser\n#\n\n\nDescription\n:  This function is used to restart browser.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nchangeWaitTime\n#\n\n\nDescription\n: This function is used to change the default wait time(Default 10 sec). \nThe default wait time for all the wait actions defined after \nchangeWaitTime\n action will be the same as defined in the \nchangeWaitTime\n action.\n\n\nInput Format\n : @Time in seconds\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsetElementTimeOut\n#\n\n\nDescription\n: This function is used to change the default timeout for Cognizant Intelligent Test Scripter's Object finding logic.(Default 10 second). The same action needs to be called with the default time (10 sec) as parameter when there is a need to switch to the default time for the succeeding steps.\n\n\nInput Format\n : @Time in seconds\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsetBrowserSize\n#\n\n\nDescription\n: This function will Set the browser size\n\n\nInput Format\n : In pixels for example \n@700x800\n or \n@700,800\n or \n@700 800\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nclickIfExists\n#\n\n\nDescription\n:  This function will check if an element exists. If the element exists, it will click the element, else it will ignore that step.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nSetIfExists\n#\n\n\nDescription\n: This function will check if an element exists. If the element exists, data will be set for that element or that step will be ignored.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsetAndCheck\n#\n\n\nDescription\n: This function is used to enter data in object and check if the element's value matches with the entered value.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsetEncrypted\n#\n\n\nDescription\n: This function is used to enter encrypted data to the object specified\n\n\nInput Format\n : @Encrypted text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n: If the data is passed from a data sheet, the data in the datasheet should be encrypted\n\n\n\n\nfiller\n#\n\n\nDescription\n: This is an empty action (does nothing), useful in some cases like looping/debugging.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nStartBrowser\n#\n\n\nDescription\n: This function is used to start a specified browser.\n\n\nInput Format\n : @Browser's Name\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nStopBrowser\n#\n\n\nDescription\n: This function is used to stop the current browser\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nAddVar\n#\n\n\nDescription\n: This function is used to add a user-defined variable with a desired value and the scope of this variable is till the end of the test case in which it is defined\n\n\nInput Format\n : @Expected Text \n\n\nCondition\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n%Variable%\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n%Variable%\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n%Variable%\n\n\n\n\n\n\n\n\nAddGlobalVar\n#\n\n\nDescription\n: Same as \nAddVar\n but scope is till the end of the test set execution. \n\n\nInput Format\n : Text in Input \n\n\nCondition\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n%Variable%\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n%Variable%\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n%Variable%\n\n\n\n\n\n\n\n\nclear\n#\n\n\nDescription\n: This function is used to clear the object's text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nmoveTo\n#\n\n\nDescription\n: Move the browser view to the specified element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nOpen\n#\n\n\nDescription\n: This function will open the URL provided by the user in the default browser\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nhighlight\n#\n\n\nDescription\n:  Make a rectangular border around the element\n\n\nInput Format\n : Color in hexcode like \n@#ff44ff\n. If it is left empty red will be taken as default.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nVerify Element\n#\n\n\nverifyElementNotPresent\n#\n\n\nDescription\n: This function will check if the specified element is not present in the web page ie. In the DOM .\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementNotSelected\n#\n\n\nDescription\n: This function will check if the specified element is not selected.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementNotDisplayed\n#\n\n\nDescription\n: This function will verify if the element is not displayed.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementNotEnabled\n#\n\n\nDescription\n:  This function will check if the specified element is not enabled\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementDisplayed\n#\n\n\nDescription\n: This function will check if the object is displayed on web page.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyHSrollBarPresent\n#\n\n\nDescription\n: This function will check if the horizontal scrollbar is present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nverifyHSrollBarNotPresent\n#\n\n\nDescription\n: This function will check if the horizontal scrollbar is not present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nverifyVSrollBarPresent\n#\n\n\nDescription\n:  This function will check if the vertical scrollbar is present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nverifyVSrollBarNotPresent\n#\n\n\nDescription\n: This function will check if the vertical scrollbar is not present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementPresent\n#\n\n\nDescription\n: This function will check if the specified element is present in the web page ie) in the DOM.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementSelected\n#\n\n\nDescription\n: This function will check if the element is selected.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyElementEnabled\n#\n\n\nDescription\n: This function will check if the element is enabled.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nverifyPageSource\n#\n\n\nDescription\n: This function will check if the page source content of the current page is matching with the expected page source content provided by the user.\n\n\nInput Format\n : @Expected PageSource Content\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nBrowser Utility\n#\n\n\nmaximize\n#\n\n\nDescription\n:This function is used for maximizing the browser window.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nauthenticate\n#\n\n\nDescription\n:This function is used for handing the authentication window. Supports IE only. If executed for other browsers the script will fail. You can skip this by setting \noptional\n value in the Condition field.\n\n\nInput Format\n : @username##password\n\n\nCondition\n : optional\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@data\n\n\n\n\n\n\n\n\nBrowser\n\n\n@data\n\n\noptional\n\n\n\n\n\n\n\n\nBy Label\n#\n\n\nsetInputByLabel\n#\n\n\nDescription\n: This function will set an input element, with the given data,  that is adjacent to the provided label element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nclickInputByLabel\n#\n\n\nDescription\n: This function will click an input element that is adjacent to the provided label element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nclickInputByText\n#\n\n\nDescription\n: This function will click an input element that is adjacent to the provided text \n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsubmitInputByLabel\n#\n\n\nDescription\n: This function will submit input element adjacent to the provided label element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementTextContainsByLabel\n#\n\n\nDescription\n: This function will check if the text of the input element adjacent to provided label element contains the given text(in the Input Column) \n\n\nInput Format\n : @Expected Text.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextByLabel\n#\n\n\nDescription\n:  This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column)\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nVerifications\n#\n\n\nverifyVariableFromDataSheet\n#\n\n\nDescription\n: This function will validate the value of a given variable against data in a datasheet cell.\n\n\nInput Format\n : Datasheet:column\n\n\nCondition\n: %variable%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\nsheet:column\n\n\n%variable%\n\n\n\n\n\n\n\n\nverifyCookiePresent\n#\n\n\nDescription\n: This function will check if the cookie is present. Search will occur based on the cookie name.\n\n\nInput Format\n:@Cookie name.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nverifyCookieByName\n#\n\n\nDescription\n: This function will search for the cookie by name and then compare the cookie value with the user-provided value.\n\n\nInput Format\n : @Cookie name:Cookie value.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nverifyAlertText\n#\n\n\nDescription\n: This function will match the alert text with the expected value.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nverifyAlertPresent\n#\n\n\nDescription\n:This function will verify the presence of an alert.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nverifyVariable\n#\n\n\nDescription\n:  This function will check if the stored variable value matches the expected value.\n\n\nInput Format\n : @VariableName=Value\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\n\n\nverifyTextPresentInPage\n#\n\n\nDescription\n: This function will search for the text inside html tag of the page.\n\n\nInput Format\n:@Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nWait for\n#\n\n\nwaitForElementToBeVisible\n#\n\n\nDescription\n:  This function will wait till the element is visible on the screen\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementToBeInVisible\n#\n\n\nDescription\n: This function will wait till the element becomes invisible.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementToBeClickable\n#\n\n\nDescription\n: This function will wait till the element becomes clickable.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementToBeSelected\n#\n\n\nDescription\n: This function will wait till the element is selected\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementToContainText\n#\n\n\nDescription\n: This function will wait till the element contains the given text\n\n\nInput Format\n : @Text to check.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"\nChangeWaitTime\n\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\nTime in seconds\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\nTime in seconds\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementToContainValue\n#\n\n\nDescription\n:  This function will wait till the element contains the given value\n\n\nInput Format\n : @Text to check.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\nTime in seconds\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\nTime in seconds\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementToBePresent\n#\n\n\nDescription\n: This function will wait till the element loads in the DOM.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForFrameAndSwitch\n#\n\n\nDescription\n:  This function will wait for the frame to be available and switch to it.\n\n\nInput\n: @id or name or index\n\n\nThe input is optional if you choose to give the web element (the frame itself) under the object name.This element can be added as an object under the Object repository.\n\n\nIf the object name used is \"Browser\", then you need to give the frame \nid or name or index\n under the input column\n\n\nCondition\n : Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"\nChangeWaitTime\n\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\nframe id or name or index\n\n\nTime in seconds  (optional)\n\n\n\n\n\n\nFrame itself as an element\n\n\n\n\nTime in seconds  (optional)\n\n\n\n\n\n\n\n\nwaitForPageLoaded\n#\n\n\nDescription\n: This function will wait till the page is loaded. \nNote: This is not for Ajax calls\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForAlertPresent\n#\n\n\nDescription\n:  This function will wait for alert to appear on the page.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForTitleToBe\n#\n\n\nDescription\n:  This function will wait till the title of the page matches with the given text.\n\n\nInput Format\n : @Text to check\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\nTime in seconds\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\nTime in seconds\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForTitleToContain\n#\n\n\nDescription\n:  This function will wait till the title of the page has the given text.\n\n\nInput Format\n : @Text to check\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\nTime in seconds\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\nTime in seconds\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitTillCustomScript\n#\n\n\nDescription\n:   This function will wait till the given javascript condition returns true. It is applicable only for JavaScript functions that return a boolean value.\n\n\nInput Format\n : @Javascript to evaluate \n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\nTime in seconds\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\nTime in seconds\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nclickAndWait\n#\n\n\nDescription\n: This function is used for clicking and waiting for the page to be loaded.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nwaitForElementSelectionToBeTrue\n#\n\n\nDescription\n:  This function will wait till the element selection becomes true\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nwaitForElementSelectionToBeFalse\n#\n\n\nDescription\n: This function will wait till the element selection becomes false.\n\n\nCondition\n :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \nChangeWaitTime\n function with the desired wait time\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\nTime in seconds\n\n\n\n\n\n\n\n\nSwitch to\n#\n\n\nTo switch to a new frame, you can either go for these actions or you can set the frame id or name under the frame property of your object in the UI of the tool.\n\n\nswitchToFrameByIndex\n#\n\n\nDescription\n:  This function is used for switching control to a frame by given index.\n\n\nInput Format\n :  @Frame's Index\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToWindowByTitle\n#\n\n\nDescription\n:   This function is used for switching control to a window by  given title.\n\n\nInput Format\n : @Window's Title\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToWindowByIndex\n#\n\n\nDescription\n:  This function is used for switching control to a window by  given index.\n\n\nInput Format\n : @Window's Index\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToFrame\n#\n\n\nDescription\n:  This function is used for switching control to  frame with id or name specified.\n\n\nInput Format\n : @Frame Name or Id\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToWindowByTitleStartsWith\n#\n\n\nDescription\n: This function is used for switching control to another window whose title begins with the provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToWindowByTitleContains\n#\n\n\nDescription\n: This function is used for switching control to another window whose title has the provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToWindowByTitleEndsWith\n#\n\n\nDescription\n: This function is used for switching control to another window whose title ends with the provided data\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToWindowByTitleMatches\n#\n\n\nDescription\n: This function is used for switching control to another window whose title matches with the provided data (can use regex also). \n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nswitchToDefaultContent\n#\n\n\nDescription\n:  This function is used for switching control to the default window.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\ncreateAndSwitchToWindow\n#\n\n\nDescription\n:  This function is used to create a new window and then for switching control to the newly created window.\n\n\nInput Format\n :  @url to open after creating a new window. If this input column is empty then empty url will be loaded\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ncloseAndSwitchToWindow\n#\n\n\nDescription\n:  This function will close the current window and switch back to the default window.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nDrop down\n#\n\n\nselectByIndex\n#\n\n\nDescription\n:  This function will select an option from a drop down whose index matches the given index.\n\n\nInput Format\n :  @Expected Value's Index\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectAll\n#\n\n\nDescription\n:  This function will clear all the selected entries. This is only valid when there is support for multiple selections in the drop down.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nselectByVisibleText\n#\n\n\nDescription\n:  This function will select an option from a drop down whose visible text matches the given text.\n\n\nInput Format\n :  @Expected Value's Index\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectMultipleByText\n#\n\n\nDescription\n:  This function will select all options that display the text matching the given text.\n\n\nInput Format\n :  @Expected Text1,Expected Text2\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectMultipleByValue\n#\n\n\nDescription\n:  This function will select all options that have value matching the given value.\n\n\nInput Format\n :  @Expected value1,Expected value2\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectByValue\n#\n\n\nDescription\n:  This function will select an option from a drop down whose value ('value' attribute of option HTML tag) matches the given value.\n\n\nInput Format\n :  @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectMultipleByIndex\n#\n\n\nDescription\n:  This function will select all multiple options that have index matching the given set of indices.\n\n\nInput Format\n : @Expected index1,Expected index2\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectByVisibleText\n#\n\n\nDescription\n:  This function will de-select an option that displays text matching the given text.\n\n\nInput Format\n :  @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectByValue\n#\n\n\nDescription\n:  This function will de-select an option that has value matching the given value.\n\n\nInput Format\n : @Expected value\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectByIndex\n#\n\n\nDescription\n:  This function will de-select an option that has index matching the given index.\n\n\nInput Format\n :  @Expected index\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertSelectContains\n#\n\n\nDescription\n: This function will assert if the selected element from the drop down matches the user-specified input.\n\n\nInput Format\n :  @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectValueFromUnorderedList\n#\n\n\nDescription\n:  This function will select the value based on the visible text from an unordered list.\n\n\nInput Format\n :  @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectIndexFromUnorderedList\n#\n\n\nDescription\n:  This function will select the value from an unordered list based on the index.\n\n\nInput Format\n :  @Expected Value's index\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectMultipleByText\n#\n\n\nDescription\n:  This function will deselect all options that display text matching the given text.\n\n\nInput Format\n :  @Expected Text1,Expected Text2\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectMultipleByValue\n#\n\n\nDescription\n:  This function will de-select all options that has value matching the given values.\n\n\nInput Format\n :  @Expected value1,Expected value2\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeSelectMultipleByIndex\n#\n\n\nDescription\n:  This function will de-select all options that has index matching the given indices. This is done by examining the \"index\" attribute of an element, and not merely by counting.If there is no index attribute used then option identified by the count\n\n\nInput Format\n :  @Expected index1,Expected index2\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nselectAll\n#\n\n\nDescription\n:   This function will select all options from a select element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable\n#\n\n\ngetCellValue\n#\n\n\nDescription\n:   This function is used to get data from the desired cell of the web table and store it in a user-defined variable.\n\n\nInput Format\n : @RowNo;ColNo,%variableName%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\n\n\ngetColCount\n#\n\n\nDescription\n:   This function is used to count the number of columns in a desired row in a web table and store it in a user-defined variable.\n\n\nInput Format\n : @RowNo,%variableName%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\n\n\ngetRowNumber\n#\n\n\nDescription\n:   This function is used to get the number of the row of the desired data in a web table and store it in a user-defined variable.\n\n\nInput Format\n : @Expected Data,%variableName%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\n\n\ngetColNumber\n#\n\n\nDescription\n:  This function is used to get the column number of the desired data in a web table and store it in a user-defined variable.\n\n\nInput Format\n : @Expected Data,%variableName%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\n\n\ngetRowCount\n#\n\n\nDescription\n:   This function is used to count the number of rows in a web table and store it in a user-defined variable.\n\n\nInput Format\n : %variableName%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nRelative Command\n#\n\n\nset_Relative\n#\n\n\nDescription\n:   This function will set data in an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique).\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nclick_Relative\n#\n\n\nDescription\n:   This function will click an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique)\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nDynamic Object\n#\n\n\nsetglobalObjectProperty\n#\n\n\nDescription\n:   This function is used to customize all objects\u2019 property based on the requirement at runtime.User can give his desired value as an input which will replace the matching condition in the object's property. \nFor more details, please refer to Help\nFaq\nDynamic Object Handling\nHow to change Object property at runtime? \n\n\nInput Format\n :Input Column : @User Defined Text String\n\n\nCondition Column\n : #Variable name\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n%var%\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n%var%\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n%var%\n\n\n\n\n\n\n\n\nsetObjectProperty\n#\n\n\nDescription\n:  This function is used to customize any object property based on the requirement during the runtime. User can give a desired value as an input which will replace the matching condition in the object property. \nFor more details, refer to: Help\nFaq\nDynamic Object Handling\nHow to change Object property at runtime?\n\n\nInput Format\n : @User Defined Text String\n\n\nCondition Column\n : #Variable name\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n%var%\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n%var%\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n%var%\n\n\n\n\n\n\n\n\nCheckbox\n#\n\n\nuncheck\n#\n\n\nDescription\n:  This function will uncheck the specified check box.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\ncheckAllCheckBoxes\n#\n\n\nDescription\n:  This function will check all the checkboxes on a page.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\ncheck\n#\n\n\nDescription\n:  This function will check the specified checkbox element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nJS Commands\n#\n\n\nclickByJS\n#\n\n\nDescription\n:  This function will use JavaScript to click an object (useful when selenium functions do not work).\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nsetByJS\n#\n\n\nDescription\n:  This function will use JavaScript to set data in an object (useful when selenium functions do not work).\n\n\nInput Format\n : @Expected data\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsetEncryptedByJS\n#\n\n\nDescription\n:  This function will use JavaScript to set encrypted data in an object (useful when selenium functions do not work).\n\n\nInput Format\n : @Expected encrypted data\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nclearByJS\n#\n\n\nDescription\n:  This function will use JavaScript to clear an objects text content  (useful when selenium functions do not work).\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nselectByJS\n#\n\n\nDescription\n: This function is used to select a given option from a drop down and is useful when selenium functions do not work.  \n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertInsideBounds\n#\n\n\nDescription\n: To function is used to check if the given object is inside the boundary.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nexecuteEval\n#\n\n\nDescription\n: This function is used to execute the JavaScript commands \n\n\nInput Format\n : @java script scripts\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nAssertElement\n#\n\n\nassertElementNotPresent\n#\n\n\nDescription\n: This function will check if the specified element is not present in the web page ie. In the DOM itself.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementNotSelected\n#\n\n\nDescription\n:  This function will check if the specified element is not selected\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementNotDisplayed\n#\n\n\nDescription\n: This function will check if the specified element is not displayed.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementNotEnabled\n#\n\n\nDescription\n:  This function will check if the specified element is not enabled.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementDisplayed\n#\n\n\nDescription\n:  This function will check if the object is displayed on web page.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertHScrollBarPresent\n#\n\n\nDescription\n: This function will check if horizontal scrollbar is present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nassertHScrollBarNotPresent\n#\n\n\nDescription\n: This function will check if horizontal scrollbar is not present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nassertVScrollBarPresent\n#\n\n\nDescription\n:   This function will check if vertical scrollbar is present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nassertVScrollBarNotPresent\n#\n\n\nDescription\n: This function will check if vertical scrollbar is not present.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementPresent\n#\n\n\nDescription\n:  This function will check if specified element is present in the web page ie. In the DOM of the page\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementSelected\n#\n\n\nDescription\n: This function will check if the element is selected.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertElementEnabled\n#\n\n\nDescription\n: This function will check if the element is enabled.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nassertPageSource\n#\n\n\nDescription\n: This function will check if the page source content of the current page is matching with the expected page source content provided by the user.\n\n\nInput Format\n : @Expected PageSource content\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nCommon methods\n#\n\n\nrefreshDriver\n#\n\n\nDescription\n: This function will refresh the current web page.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nforward\n#\n\n\nDescription\n:  This function is used for navigating forward to next page.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nsubmit\n#\n\n\nDescription\n:  This function will Submit an element.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\ndragElement\n#\n\n\nDescription\n: This function will drag the specified element(under Object column) which can be later dropped on to other element by using \ndropElement\n.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\ndropElement\n#\n\n\nDescription\n: This function will drop the element which is dragged by using \ndragElement\n over the object specified here.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\ndragAndDropBy\n#\n\n\nDescription\n: This function will drag and drop an object by specified coordinates in the input column. \n\n\nInput Format\n :@x-coordinate,y-coordinate\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\naddCookie\n#\n\n\nDescription\n:  This function will add a cookie defined in the input column.\n\n\nInput Format\n : @Cookie Name:Cookie Value\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nback\n#\n\n\nDescription\n: This function is used for navigating to the previous page.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\npause\n#\n\n\nDescription\n:This function is used for giving a pause (Thread.sleep) in execution.\n\n\nInput Format\n :  @Time in miliseconds\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndoubleClickElement\n#\n\n\nDescription\n: This function will double-click on an object.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nmouseOverElement\n#\n\n\nDescription\n: This function will perform the mouse over action on the object.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\ndragToAndDropElement\n#\n\n\nDescription\n: This function is used to perform drag and drop operation. Specify the object which you want to drag, in the 'Object' column and specify the object on which you want to drop ,in the 'input' column.\n\n\nInput Format\n : @PageName:ObjectName(Destination)\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\n\n\nreleaseElement\n#\n\n\nDescription\n:  This function is used to release the element held by \nclickAndHoldElement\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n\n\n\n\n\n\n\n\n\n\nsaveScreenshot\n#\n\n\nDescription\n: This function will capture the screenshot and save in the specific location.\n\n\nInput Format\n : @File destination (eg. @D:\\filename.png)\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\n\n\ntakeScreenshot\n#\n\n\nDescription\n:  This function will take a screenshot\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nsaveElementScreenshot\n#\n\n\nDescription\n: This function will take a screenshot of the web element and save it in the location specified under the Input column. If no location is specified then the default location is \nyour project folder\\ObjectRepository\\Pagename\\objectname\n.\n\n\nThis function can also be used to save screenshots for the entire set of page objects, under the default location which is inside the \nObjectRepository\n folder.\n\n\nInput Format (Optional)\n : @File destination (eg. @D:\\foldername) \n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@File destination(optional)\n\n\n\n\n\n\n\n\nBrowser\n\n\n@PageName from the object repository\n\n\n\n\n\n\n\n\n\n\nstoreCurrentUrl\n#\n\n\nDescription\n:  This function will store the current URL into a user defined variable.\n\n\nInput Format\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nstoreTextinDataSheet\n#\n\n\nDescription\n: This Function will store the element's text into respective column of a given datasheet.\n\n\nInput Format\n : @Expected datasheet name:column name\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\n\n\nNote\n: Ensure that your data sheet doesn't contain column names with spaces.\n\n\nstoreTextPresent\n#\n\n\nDescription\n: This function will check if the element has expected text and store the flag 'True' or 'False' in the variable.\n\n\nInput Format\n : @Expected text\n\n\nCondition\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n%var%\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n%var%\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n%var%\n\n\n\n\n\n\n\n\nstorePageSource\n#\n\n\nDescription\n: This function will store the page source content into a user-defined variable.\n\n\nInput Format\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n%variable name%\n\n\n\n\n\n\n\n\n\n\nstoreElementSelected\n#\n\n\nDescription\n:  This function will check if the element is selected and store the flag 'True' or 'False' in the variable.\n\n\nInput Format\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n%variable name%\n\n\n\n\n\n\n\n\n\n\nstoreElementAttribute\n#\n\n\nDescription\n:  This function will store the element's attribute value into a user-defined variable.\n\n\nInput Format\n : @Elements_Attribute_Name\n\n\nCondition\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n%var%\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n%var%\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n%var%\n\n\n\n\n\n\n\n\nstoreElementValue\n#\n\n\nDescription\n:   This function will store the element's \u2018value\u2018 attribute into a user-defined variable.\n\n\nInput Format\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n%variable name%\n\n\n\n\n\n\n\n\n\n\nstoreCookiePresent\n#\n\n\nDescription\n:   This function will check if the given cookie is present and store the flag 'True' or 'False' in the variable.\n\n\nInput Format\n : @cookieName\n\n\nCondition\n: %variable%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nstoreCookieByName\n#\n\n\nDescription\n:   This function will store the given cookie's value in the variable.\n\n\nInput Format\n : @cookieName \n\n\nCondition\n: %variable%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n%variable%\n\n\n\n\n\n\n\n\nstoreAlertText\n#\n\n\nDescription\n:   This function will store alert text into a user defined variable.\n\n\nInput Format\n: %variable%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nstoreAlertPresent\n#\n\n\nDescription\n:   This function will check if alert is present and store the flag 'True' or 'False' in a given variable.\n\n\nInput Format\n: %variable%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n%variable%\n\n\n\n\n\n\n\n\n\n\nsendKeysToElement\n#\n\n\nDescription\n:  This function is used to perform keyboard events with respect to object.\n\n\nInput Format\n :  @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+A) \n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nsendKeysToWindow\n#\n\n\nDescription\n:  This function is used to perform the keyboard actions with respect to window.\n\n\nInput Format\n : @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+T) \n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\ndeleteCookie\n#\n\n\nDescription\n:  This function will delete the cookie specified by the user.\n\n\nInput Format\n : @Cookie Name\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nanswerAlert\n#\n\n\nDescription\n:  This function is used for switch control to alert and answer it.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nacceptAlert\n#\n\n\nDescription\n:  This function is used for switch control to alert and accept it.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\ndismissAlert\n#\n\n\nDescription\n:  This function is used to switch control to alert and  to dismiss it.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nstoreVariable\n#\n\n\nDescription\n:  This function will store the given data (in the input column) into a user-defined variable.This function is same as \nAddVar\n action.\n\n\nInput Format\n : @Desired Value\n\n\nCondition\n: %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nstoreVariableInDataSheet\n#\n\n\nDescription\n:  This function will store the variable's value (as given in the condition column) in the given data sheet and data column\n\n\nInput Format\n: Sheetname:columnname\n\n\nCondition\n: %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n%var%\n\n\n\n\n\n\n\n\nstoreTitle\n#\n\n\nDescription\n:   This function will store the current web page title into a user-defined variable.\n\n\nInput Format\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nstoreText\n#\n\n\nDescription\n:  This function will store the element's text into a user-defined variable.\n\n\nInput Format\n : %variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nstoreEval\n#\n\n\nDescription\n:  Function to store a Javascript expression's value in a variable.\n\n\nFor example\n if you have a variable as \n'a' and 'b'\n and want to add them and store the sum in a variable, you can follow the following syntax.\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@var a=20;var b=30;return c=a+b;\n\n\n%var%\n\n\n\n\n\n\n\n\nNow the value 50(a+b), will be stored in var.\n\n\nInput Format\n :  javascript \n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n%var%\n\n\n\n\n\n\n\n\nprint\n#\n\n\nDescription\n:  This function can be used for printing expected data in report.\n\n\nInput Format\n : @Expected Text or variable can also be printed like %var_name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nclose\n#\n\n\nDescription\n:  This function will close the selenium Web Driver.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nScroll\n#\n\n\nscrollHorizontallyTo\n#\n\n\nDescription\n:  This function will scroll horizontally to a user defined position.\n\n\nInput Format\n : @left|right|number\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nscrollVerticallyTo\n#\n\n\nDescription\n:  This function will scroll vertically to a user defined position.\n\n\nInput Format\n : @left|right|number\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nscrollToBottom\n#\n\n\nDescription\n:  This function will scroll to the bottom of the page\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nscrollTo\n#\n\n\nDescription\n:  This function will scroll to a user specified position. \n\n\nInput Format\n :  @x co-ordinate,y co-ordinate\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nscrollToTop\n#\n\n\nDescription\n:  This function will scroll to the top of the page\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nscrollToLeft\n#\n\n\nDescription\n:  This function will scroll to the left of the page\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nscrollToRight\n#\n\n\nDescription\n: This function will scroll to the right of the page\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nAssertions\n#\n\n\nassertTextPresentInPage\n#\n\n\nDescription\n:  This function will search for the expected text within the html tag of the page and assert the same\n\n\nInput Format\n :   @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertVariable\n#\n\n\nDescription\n:  This function will assert a stored variable's value with the value given by the user.\n\n\nInput Format\n : @%var_name%=Expected Value\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertCookiePresent\n#\n\n\nDescription\n: This function will assert the presence of a cookie by it's specified name and store the result in a variable.\n\n\nInput Format\n :   @CookieName\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n%variable%\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n%variable%\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n%variable%\n\n\n\n\n\n\n\n\nassertCookieByName\n#\n\n\nDescription\n:  This function will assert the cookie's (the name of the cookie is given is specified in the input column) value with the one in the input column\n\n\nInput Format\n :   @CookieName:CookieValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@data\n\n\n\n\n\n\n\n\n\n\nassertAlertText\n#\n\n\nDescription\n:  This function will assert the text present in alert with the given text.\n\n\nInput Format\n :  @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertAlertPresent\n#\n\n\nDescription\n:  This function will assert the presence of an alert\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\n\n\n\n\n\n\n\n\nassertEval\n#\n\n\nDescription\n:   This function will assert if the evaluated javascript expression equals the expected value provided.\n\n\nInput Format\n :   @javascript:expectedvalue.\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertVariableFromDataSheet\n#\n\n\nDescription\n:   This function will check if the variable given in the condition column has a value equals to the value from the datasheet mentioned in the input column. \n\n\nInput Format\n :   Datasheet name:Column name\n\n\nCondition Format\n: %Variable name%\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n%variable%\n\n\n\n\n\n\n\n\nTitle\n#\n\n\nassertTitleIStartsWith\n#\n\n\nDescription\n: This function will validate if the current page title begins with the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleEquals\n#\n\n\nDescription\n:  This function will validate if the title of the current page is equals the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleContains\n#\n\n\nDescription\n:  This function will validate if the title of the current page has the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleStartsWith\n#\n\n\nDescription\n:   This function will validate if the title of the current page begins with the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleEndsWith\n#\n\n\nDescription\n:   This function will validate if the title of the current page ends with the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleMatches\n#\n\n\nDescription\n:   This function will validate if the title current page matches  the user-provided data. You can also use regular expression in the Input field.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleIEquals\n#\n\n\nDescription\n:  This function will validate if the title of the current page is equals the user-provided data. This function will ignore case of user provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleIContains\n#\n\n\nDescription\n:  This function will validate if the title of the current page contains the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertTitleIEndsWith\n#\n\n\nDescription\n:  This function will validate if the title of the current page ends with the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nAttribute\n#\n\n\nassertElementAttrEquals\n#\n\n\nDescription\n: This function will validate if specified attribute for an element is equal to the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrContains\n#\n\n\nDescription\n:  This function will validate if the specified attribute for an element contains the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrStartsWith\n#\n\n\nDescription\n:   This function will validate if specified attribute for an element begins with the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrEndsWith\n#\n\n\nDescription\n:   This function will validate if specified attribute for an element ends with user provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrMatches\n#\n\n\nDescription\n:    This function will validate if specified attribute for an element matches with the user-provided data. You can also use regular expression in the Input field.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrIEquals\n#\n\n\nDescription\n:    This function will validate if specified attribute for an element is equals the user-provided data.This function will ignore case of the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrIContains\n#\n\n\nDescription\n:   This function will validate if specified attribute contains user-provided data.This function will ignore case of the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrIStartsWith\n#\n\n\nDescription\n:    This function will validate if specified attribute for an element begins with the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementAttrIEndsWith\n#\n\n\nDescription\n:  This function will validate if specified attribute for an element ends with the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nverifyElementAttribute\n#\n\n\nDescription\n: This function will check if the value of the specified attribute of the element matches the user provided value.\n\n\nInput Format\n : attributeName attributeValue\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nText\n#\n\n\nassertElementTextEquals\n#\n\n\nDescription\n:  This function will validate if a specified element text is equal to the user-provided text.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextContains\n#\n\n\nDescription\n:  This function will check if an element text contains the expected text.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextStartsWith\n#\n\n\nDescription\n:  This function will validate if specified element text starts with user provided data.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextEndsWith\n#\n\n\nDescription\n:   This function will validate if the specified element text ends with user-provided data.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextMatches\n#\n\n\nDescription\n:  This function will validate if a specified element text matches with the user-provided data. You can also use regular expression in the Input field .\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextIEquals\n#\n\n\nDescription\n:  This function will validate if a specified element text is equal to the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextIContains\n#\n\n\nDescription\n:  This function will validate if a specified element text contains the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextIStartsWith\n#\n\n\nDescription\n: This function will validate if a specified element text begins with the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertElementTextIEndsWith\n#\n\n\nDescription\n:  This function will validate if a specified element text ends with the user-provided data. This function will ignore case of the user-provided data.\n\n\nInput Format\n : @Expected Text\n\n\nExample:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nObject\n\n\n@value\n\n\n\n\n\n\n\n\nObject\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nObject\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nURL\n#\n\n\nassertUrlEquals\n#\n\n\nDescription\n:This function will validate if the current URL equals the user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlContains\n#\n\n\nDescription\n:This function will validate if the current URL has the user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlStartsWith\n#\n\n\nDescription\n:This function will validate if the current URL beings with the user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlEndsWith\n#\n\n\nDescription\n:This function will validate if the current URL text ends with user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlMatches\n#\n\n\nDescription\n: This function will validate if the current URL matches with the user-provided data. You can also use regular expression in the Input field.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlIEquals\n#\n\n\nDescription\n: This function will validate if the current URL is equal to the user-provided data. This function will ignore case of user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlIContains\n#\n\n\nDescription\n: This function will validate if the current URL has the user-provided data.This function will ignore case of user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlIStartsWith\n#\n\n\nDescription\n: This function will validate if the current URL begins with the user-provided data. This function will ignore case of user provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%\n\n\n\n\n\n\n\n\n\n\nassertUrlIEndsWith\n#\n\n\nDescription\n: This function will validate if the current URL ends with the user-provided data. This function will ignore case of user-provided data.\n\n\nInput Format\n : @Url value \n\n\nSyntax:\n\n\n\n\n\n\n\n\nObjectName\n\n\nInput\n\n\nCondition\n\n\n\n\n\n\n\n\n\n\nBrowser\n\n\n@value\n\n\n\n\n\n\n\n\nBrowser\n\n\nSheet:Column\n\n\n\n\n\n\n\n\nBrowser\n\n\n%dynamicVar%", 
            "title": "Web"
        }, 
        {
            "location": "/actions/webactions/index.html#web-actions", 
            "text": "", 
            "title": "Web Actions"
        }, 
        {
            "location": "/actions/webactions/index.html#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/actions/webactions/index.html#set", 
            "text": "Description : This function is used to enter data in an object.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%      Inputs in the Input column can be either  hardcoded  (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example.", 
            "title": "Set"
        }, 
        {
            "location": "/actions/webactions/index.html#click", 
            "text": "Description : This function is used to perform click operation on an object.  Example:     ObjectName  Input  Condition      Object", 
            "title": "Click"
        }, 
        {
            "location": "/actions/webactions/index.html#rightclick", 
            "text": "Description : This function is used to perform right click operation on an object or in the browser.  Example:     ObjectName  Input  Condition      Browser      Object", 
            "title": "rightClick"
        }, 
        {
            "location": "/actions/webactions/index.html#submitifexists", 
            "text": "Description : This function will check if an object exists. If the object exists, it will submit else it will ignore that step.  Example:     ObjectName  Input  Condition      Object", 
            "title": "SubmitIfExists"
        }, 
        {
            "location": "/actions/webactions/index.html#restartbrowser", 
            "text": "Description :  This function is used to restart browser.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "RestartBrowser"
        }, 
        {
            "location": "/actions/webactions/index.html#changewaittime", 
            "text": "Description : This function is used to change the default wait time(Default 10 sec). \nThe default wait time for all the wait actions defined after  changeWaitTime  action will be the same as defined in the  changeWaitTime  action.  Input Format  : @Time in seconds  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "changeWaitTime"
        }, 
        {
            "location": "/actions/webactions/index.html#setelementtimeout", 
            "text": "Description : This function is used to change the default timeout for Cognizant Intelligent Test Scripter's Object finding logic.(Default 10 second). The same action needs to be called with the default time (10 sec) as parameter when there is a need to switch to the default time for the succeeding steps.  Input Format  : @Time in seconds  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "setElementTimeOut"
        }, 
        {
            "location": "/actions/webactions/index.html#setbrowsersize", 
            "text": "Description : This function will Set the browser size  Input Format  : In pixels for example  @700x800  or  @700,800  or  @700 800  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "setBrowserSize"
        }, 
        {
            "location": "/actions/webactions/index.html#clickifexists", 
            "text": "Description :  This function will check if an element exists. If the element exists, it will click the element, else it will ignore that step.  Example:     ObjectName  Input  Condition      Object", 
            "title": "clickIfExists"
        }, 
        {
            "location": "/actions/webactions/index.html#setifexists", 
            "text": "Description : This function will check if an element exists. If the element exists, data will be set for that element or that step will be ignored.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "SetIfExists"
        }, 
        {
            "location": "/actions/webactions/index.html#setandcheck", 
            "text": "Description : This function is used to enter data in object and check if the element's value matches with the entered value.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "setAndCheck"
        }, 
        {
            "location": "/actions/webactions/index.html#setencrypted", 
            "text": "Description : This function is used to enter encrypted data to the object specified  Input Format  : @Encrypted text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column       Note : If the data is passed from a data sheet, the data in the datasheet should be encrypted", 
            "title": "setEncrypted"
        }, 
        {
            "location": "/actions/webactions/index.html#filler", 
            "text": "Description : This is an empty action (does nothing), useful in some cases like looping/debugging.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "filler"
        }, 
        {
            "location": "/actions/webactions/index.html#startbrowser", 
            "text": "Description : This function is used to start a specified browser.  Input Format  : @Browser's Name  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "StartBrowser"
        }, 
        {
            "location": "/actions/webactions/index.html#stopbrowser", 
            "text": "Description : This function is used to stop the current browser  Example:     ObjectName  Input  Condition      Browser", 
            "title": "StopBrowser"
        }, 
        {
            "location": "/actions/webactions/index.html#addvar", 
            "text": "Description : This function is used to add a user-defined variable with a desired value and the scope of this variable is till the end of the test case in which it is defined  Input Format  : @Expected Text   Condition  : %variable name%  Example:     ObjectName  Input  Condition      Browser  @value  %Variable%    Browser  Sheet:Column  %Variable%    Browser  %dynamicVar%  %Variable%", 
            "title": "AddVar"
        }, 
        {
            "location": "/actions/webactions/index.html#addglobalvar", 
            "text": "Description : Same as  AddVar  but scope is till the end of the test set execution.   Input Format  : Text in Input   Condition  : %variable name%  Example:     ObjectName  Input  Condition      Browser  @value  %Variable%    Browser  Sheet:Column  %Variable%    Browser  %dynamicVar%  %Variable%", 
            "title": "AddGlobalVar"
        }, 
        {
            "location": "/actions/webactions/index.html#clear", 
            "text": "Description : This function is used to clear the object's text  Example:     ObjectName  Input  Condition      Object", 
            "title": "clear"
        }, 
        {
            "location": "/actions/webactions/index.html#moveto", 
            "text": "Description : Move the browser view to the specified element.  Example:     ObjectName  Input  Condition      Object", 
            "title": "moveTo"
        }, 
        {
            "location": "/actions/webactions/index.html#open", 
            "text": "Description : This function will open the URL provided by the user in the default browser  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "Open"
        }, 
        {
            "location": "/actions/webactions/index.html#highlight", 
            "text": "Description :  Make a rectangular border around the element  Input Format  : Color in hexcode like  @#ff44ff . If it is left empty red will be taken as default.  Example:     ObjectName  Input  Condition      Object      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "highlight"
        }, 
        {
            "location": "/actions/webactions/index.html#verify-element", 
            "text": "", 
            "title": "Verify Element"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementnotpresent", 
            "text": "Description : This function will check if the specified element is not present in the web page ie. In the DOM .  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementNotPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementnotselected", 
            "text": "Description : This function will check if the specified element is not selected.  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementNotSelected"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementnotdisplayed", 
            "text": "Description : This function will verify if the element is not displayed.  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementNotDisplayed"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementnotenabled", 
            "text": "Description :  This function will check if the specified element is not enabled  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementNotEnabled"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementdisplayed", 
            "text": "Description : This function will check if the object is displayed on web page.  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementDisplayed"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyhsrollbarpresent", 
            "text": "Description : This function will check if the horizontal scrollbar is present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "verifyHSrollBarPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyhsrollbarnotpresent", 
            "text": "Description : This function will check if the horizontal scrollbar is not present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "verifyHSrollBarNotPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyvsrollbarpresent", 
            "text": "Description :  This function will check if the vertical scrollbar is present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "verifyVSrollBarPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyvsrollbarnotpresent", 
            "text": "Description : This function will check if the vertical scrollbar is not present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "verifyVSrollBarNotPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementpresent", 
            "text": "Description : This function will check if the specified element is present in the web page ie) in the DOM.  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementselected", 
            "text": "Description : This function will check if the element is selected.  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementSelected"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementenabled", 
            "text": "Description : This function will check if the element is enabled.  Example:     ObjectName  Input  Condition      Object", 
            "title": "verifyElementEnabled"
        }, 
        {
            "location": "/actions/webactions/index.html#verifypagesource", 
            "text": "Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user.  Input Format  : @Expected PageSource Content  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "verifyPageSource"
        }, 
        {
            "location": "/actions/webactions/index.html#browser-utility", 
            "text": "", 
            "title": "Browser Utility"
        }, 
        {
            "location": "/actions/webactions/index.html#maximize", 
            "text": "Description :This function is used for maximizing the browser window.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "maximize"
        }, 
        {
            "location": "/actions/webactions/index.html#authenticate", 
            "text": "Description :This function is used for handing the authentication window. Supports IE only. If executed for other browsers the script will fail. You can skip this by setting  optional  value in the Condition field.  Input Format  : @username##password  Condition  : optional  Example:     ObjectName  Input  Condition      Browser  @data     Browser  @data  optional", 
            "title": "authenticate"
        }, 
        {
            "location": "/actions/webactions/index.html#by-label", 
            "text": "", 
            "title": "By Label"
        }, 
        {
            "location": "/actions/webactions/index.html#setinputbylabel", 
            "text": "Description : This function will set an input element, with the given data,  that is adjacent to the provided label element.  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "setInputByLabel"
        }, 
        {
            "location": "/actions/webactions/index.html#clickinputbylabel", 
            "text": "Description : This function will click an input element that is adjacent to the provided label element.  Example:     ObjectName  Input  Condition      Object", 
            "title": "clickInputByLabel"
        }, 
        {
            "location": "/actions/webactions/index.html#clickinputbytext", 
            "text": "Description : This function will click an input element that is adjacent to the provided text   Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "clickInputByText"
        }, 
        {
            "location": "/actions/webactions/index.html#submitinputbylabel", 
            "text": "Description : This function will submit input element adjacent to the provided label element.  Example:     ObjectName  Input  Condition      Object", 
            "title": "submitInputByLabel"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextcontainsbylabel", 
            "text": "Description : This function will check if the text of the input element adjacent to provided label element contains the given text(in the Input Column)   Input Format  : @Expected Text.  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextContainsByLabel"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextbylabel", 
            "text": "Description :  This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column)  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextByLabel"
        }, 
        {
            "location": "/actions/webactions/index.html#verifications", 
            "text": "", 
            "title": "Verifications"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyvariablefromdatasheet", 
            "text": "Description : This function will validate the value of a given variable against data in a datasheet cell.  Input Format  : Datasheet:column  Condition : %variable%  Example:     ObjectName  Input  Condition      Browser  sheet:column  %variable%", 
            "title": "verifyVariableFromDataSheet"
        }, 
        {
            "location": "/actions/webactions/index.html#verifycookiepresent", 
            "text": "Description : This function will check if the cookie is present. Search will occur based on the cookie name.  Input Format :@Cookie name.  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "verifyCookiePresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifycookiebyname", 
            "text": "Description : This function will search for the cookie by name and then compare the cookie value with the user-provided value.  Input Format  : @Cookie name:Cookie value.  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "verifyCookieByName"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyalerttext", 
            "text": "Description : This function will match the alert text with the expected value.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "verifyAlertText"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyalertpresent", 
            "text": "Description :This function will verify the presence of an alert.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "verifyAlertPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyvariable", 
            "text": "Description :  This function will check if the stored variable value matches the expected value.  Input Format  : @VariableName=Value  Example:     ObjectName  Input  Condition      Browser  @value", 
            "title": "verifyVariable"
        }, 
        {
            "location": "/actions/webactions/index.html#verifytextpresentinpage", 
            "text": "Description : This function will search for the text inside html tag of the page.  Input Format :@Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "verifyTextPresentInPage"
        }, 
        {
            "location": "/actions/webactions/index.html#wait-for", 
            "text": "", 
            "title": "Wait for"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtobevisible", 
            "text": "Description :  This function will wait till the element is visible on the screen  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Object   Time in seconds", 
            "title": "waitForElementToBeVisible"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtobeinvisible", 
            "text": "Description : This function will wait till the element becomes invisible.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Object   Time in seconds", 
            "title": "waitForElementToBeInVisible"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtobeclickable", 
            "text": "Description : This function will wait till the element becomes clickable.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Object   Time in seconds", 
            "title": "waitForElementToBeClickable"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtobeselected", 
            "text": "Description : This function will wait till the element is selected  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Object   Time in seconds", 
            "title": "waitForElementToBeSelected"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtocontaintext", 
            "text": "Description : This function will wait till the element contains the given text  Input Format  : @Text to check.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \" ChangeWaitTime \" function with the desired wait time  Example:     ObjectName  Input  Condition      Object  @value  Time in seconds    Object  Sheet:Column  Time in seconds    Object  %dynamicVar%  Time in seconds", 
            "title": "waitForElementToContainText"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtocontainvalue", 
            "text": "Description :  This function will wait till the element contains the given value  Input Format  : @Text to check.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Object  @value  Time in seconds    Object  Sheet:Column  Time in seconds    Object  %dynamicVar%  Time in seconds", 
            "title": "waitForElementToContainValue"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementtobepresent", 
            "text": "Description : This function will wait till the element loads in the DOM.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser   Time in seconds", 
            "title": "waitForElementToBePresent"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforframeandswitch", 
            "text": "Description :  This function will wait for the frame to be available and switch to it.  Input : @id or name or index  The input is optional if you choose to give the web element (the frame itself) under the object name.This element can be added as an object under the Object repository.  If the object name used is \"Browser\", then you need to give the frame  id or name or index  under the input column  Condition  : Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \" ChangeWaitTime \" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser  frame id or name or index  Time in seconds  (optional)    Frame itself as an element   Time in seconds  (optional)", 
            "title": "waitForFrameAndSwitch"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforpageloaded", 
            "text": "Description : This function will wait till the page is loaded.  Note: This is not for Ajax calls  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser   Time in seconds", 
            "title": "waitForPageLoaded"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforalertpresent", 
            "text": "Description :  This function will wait for alert to appear on the page.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser   Time in seconds", 
            "title": "waitForAlertPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#waitfortitletobe", 
            "text": "Description :  This function will wait till the title of the page matches with the given text.  Input Format  : @Text to check  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser  @value  Time in seconds    Browser  Sheet:Column  Time in seconds    Browser  %dynamicVar%  Time in seconds", 
            "title": "waitForTitleToBe"
        }, 
        {
            "location": "/actions/webactions/index.html#waitfortitletocontain", 
            "text": "Description :  This function will wait till the title of the page has the given text.  Input Format  : @Text to check  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser  @value  Time in seconds    Browser  Sheet:Column  Time in seconds    Browser  %dynamicVar%  Time in seconds", 
            "title": "waitForTitleToContain"
        }, 
        {
            "location": "/actions/webactions/index.html#waittillcustomscript", 
            "text": "Description :   This function will wait till the given javascript condition returns true. It is applicable only for JavaScript functions that return a boolean value.  Input Format  : @Javascript to evaluate   Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Browser  @value  Time in seconds    Browser  Sheet:Column  Time in seconds    Browser  %dynamicVar%  Time in seconds", 
            "title": "waitTillCustomScript"
        }, 
        {
            "location": "/actions/webactions/index.html#clickandwait", 
            "text": "Description : This function is used for clicking and waiting for the page to be loaded.  Example:     ObjectName  Input  Condition      Object", 
            "title": "clickAndWait"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementselectiontobetrue", 
            "text": "Description :  This function will wait till the element selection becomes true  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time  Example:     ObjectName  Input  Condition      Object   Time in seconds", 
            "title": "waitForElementSelectionToBeTrue"
        }, 
        {
            "location": "/actions/webactions/index.html#waitforelementselectiontobefalse", 
            "text": "Description : This function will wait till the element selection becomes false.  Condition  :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use  ChangeWaitTime  function with the desired wait time  Example:     ObjectName  Input  Condition      Object   Time in seconds", 
            "title": "waitForElementSelectionToBeFalse"
        }, 
        {
            "location": "/actions/webactions/index.html#switch-to", 
            "text": "To switch to a new frame, you can either go for these actions or you can set the frame id or name under the frame property of your object in the UI of the tool.", 
            "title": "Switch to"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtoframebyindex", 
            "text": "Description :  This function is used for switching control to a frame by given index.  Input Format  :  @Frame's Index  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToFrameByIndex"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtowindowbytitle", 
            "text": "Description :   This function is used for switching control to a window by  given title.  Input Format  : @Window's Title  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToWindowByTitle"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtowindowbyindex", 
            "text": "Description :  This function is used for switching control to a window by  given index.  Input Format  : @Window's Index  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToWindowByIndex"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtoframe", 
            "text": "Description :  This function is used for switching control to  frame with id or name specified.  Input Format  : @Frame Name or Id  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToFrame"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtowindowbytitlestartswith", 
            "text": "Description : This function is used for switching control to another window whose title begins with the provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToWindowByTitleStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtowindowbytitlecontains", 
            "text": "Description : This function is used for switching control to another window whose title has the provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToWindowByTitleContains"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtowindowbytitleendswith", 
            "text": "Description : This function is used for switching control to another window whose title ends with the provided data  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToWindowByTitleEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtowindowbytitlematches", 
            "text": "Description : This function is used for switching control to another window whose title matches with the provided data (can use regex also).   Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "switchToWindowByTitleMatches"
        }, 
        {
            "location": "/actions/webactions/index.html#switchtodefaultcontent", 
            "text": "Description :  This function is used for switching control to the default window.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "switchToDefaultContent"
        }, 
        {
            "location": "/actions/webactions/index.html#createandswitchtowindow", 
            "text": "Description :  This function is used to create a new window and then for switching control to the newly created window.  Input Format  :  @url to open after creating a new window. If this input column is empty then empty url will be loaded  Example:     ObjectName  Input  Condition      Browser      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "createAndSwitchToWindow"
        }, 
        {
            "location": "/actions/webactions/index.html#closeandswitchtowindow", 
            "text": "Description :  This function will close the current window and switch back to the default window.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "closeAndSwitchToWindow"
        }, 
        {
            "location": "/actions/webactions/index.html#drop-down", 
            "text": "", 
            "title": "Drop down"
        }, 
        {
            "location": "/actions/webactions/index.html#selectbyindex", 
            "text": "Description :  This function will select an option from a drop down whose index matches the given index.  Input Format  :  @Expected Value's Index  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectByIndex"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectall", 
            "text": "Description :  This function will clear all the selected entries. This is only valid when there is support for multiple selections in the drop down.  Example:     ObjectName  Input  Condition      Object", 
            "title": "deSelectAll"
        }, 
        {
            "location": "/actions/webactions/index.html#selectbyvisibletext", 
            "text": "Description :  This function will select an option from a drop down whose visible text matches the given text.  Input Format  :  @Expected Value's Index  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectByVisibleText"
        }, 
        {
            "location": "/actions/webactions/index.html#selectmultiplebytext", 
            "text": "Description :  This function will select all options that display the text matching the given text.  Input Format  :  @Expected Text1,Expected Text2  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectMultipleByText"
        }, 
        {
            "location": "/actions/webactions/index.html#selectmultiplebyvalue", 
            "text": "Description :  This function will select all options that have value matching the given value.  Input Format  :  @Expected value1,Expected value2  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectMultipleByValue"
        }, 
        {
            "location": "/actions/webactions/index.html#selectbyvalue", 
            "text": "Description :  This function will select an option from a drop down whose value ('value' attribute of option HTML tag) matches the given value.  Input Format  :  @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectByValue"
        }, 
        {
            "location": "/actions/webactions/index.html#selectmultiplebyindex", 
            "text": "Description :  This function will select all multiple options that have index matching the given set of indices.  Input Format  : @Expected index1,Expected index2  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectMultipleByIndex"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectbyvisibletext", 
            "text": "Description :  This function will de-select an option that displays text matching the given text.  Input Format  :  @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "deSelectByVisibleText"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectbyvalue", 
            "text": "Description :  This function will de-select an option that has value matching the given value.  Input Format  : @Expected value  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "deSelectByValue"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectbyindex", 
            "text": "Description :  This function will de-select an option that has index matching the given index.  Input Format  :  @Expected index  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "deSelectByIndex"
        }, 
        {
            "location": "/actions/webactions/index.html#assertselectcontains", 
            "text": "Description : This function will assert if the selected element from the drop down matches the user-specified input.  Input Format  :  @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertSelectContains"
        }, 
        {
            "location": "/actions/webactions/index.html#selectvaluefromunorderedlist", 
            "text": "Description :  This function will select the value based on the visible text from an unordered list.  Input Format  :  @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectValueFromUnorderedList"
        }, 
        {
            "location": "/actions/webactions/index.html#selectindexfromunorderedlist", 
            "text": "Description :  This function will select the value from an unordered list based on the index.  Input Format  :  @Expected Value's index  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectIndexFromUnorderedList"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectmultiplebytext", 
            "text": "Description :  This function will deselect all options that display text matching the given text.  Input Format  :  @Expected Text1,Expected Text2  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "deSelectMultipleByText"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectmultiplebyvalue", 
            "text": "Description :  This function will de-select all options that has value matching the given values.  Input Format  :  @Expected value1,Expected value2  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "deSelectMultipleByValue"
        }, 
        {
            "location": "/actions/webactions/index.html#deselectmultiplebyindex", 
            "text": "Description :  This function will de-select all options that has index matching the given indices. This is done by examining the \"index\" attribute of an element, and not merely by counting.If there is no index attribute used then option identified by the count  Input Format  :  @Expected index1,Expected index2  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "deSelectMultipleByIndex"
        }, 
        {
            "location": "/actions/webactions/index.html#selectall", 
            "text": "Description :   This function will select all options from a select element.  Example:     ObjectName  Input  Condition      Object", 
            "title": "selectAll"
        }, 
        {
            "location": "/actions/webactions/index.html#table", 
            "text": "", 
            "title": "Table"
        }, 
        {
            "location": "/actions/webactions/index.html#getcellvalue", 
            "text": "Description :   This function is used to get data from the desired cell of the web table and store it in a user-defined variable.  Input Format  : @RowNo;ColNo,%variableName%  Example:     ObjectName  Input  Condition      Object  @value", 
            "title": "getCellValue"
        }, 
        {
            "location": "/actions/webactions/index.html#getcolcount", 
            "text": "Description :   This function is used to count the number of columns in a desired row in a web table and store it in a user-defined variable.  Input Format  : @RowNo,%variableName%  Example:     ObjectName  Input  Condition      Object  @value", 
            "title": "getColCount"
        }, 
        {
            "location": "/actions/webactions/index.html#getrownumber", 
            "text": "Description :   This function is used to get the number of the row of the desired data in a web table and store it in a user-defined variable.  Input Format  : @Expected Data,%variableName%  Example:     ObjectName  Input  Condition      Object  @value", 
            "title": "getRowNumber"
        }, 
        {
            "location": "/actions/webactions/index.html#getcolnumber", 
            "text": "Description :  This function is used to get the column number of the desired data in a web table and store it in a user-defined variable.  Input Format  : @Expected Data,%variableName%  Example:     ObjectName  Input  Condition      Object  @value", 
            "title": "getColNumber"
        }, 
        {
            "location": "/actions/webactions/index.html#getrowcount", 
            "text": "Description :   This function is used to count the number of rows in a web table and store it in a user-defined variable.  Input Format  : %variableName%  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "getRowCount"
        }, 
        {
            "location": "/actions/webactions/index.html#relative-command", 
            "text": "", 
            "title": "Relative Command"
        }, 
        {
            "location": "/actions/webactions/index.html#set_relative", 
            "text": "Description :   This function will set data in an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique).  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "set_Relative"
        }, 
        {
            "location": "/actions/webactions/index.html#click_relative", 
            "text": "Description :   This function will click an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique)  Example:     ObjectName  Input  Condition      Object", 
            "title": "click_Relative"
        }, 
        {
            "location": "/actions/webactions/index.html#dynamic-object", 
            "text": "", 
            "title": "Dynamic Object"
        }, 
        {
            "location": "/actions/webactions/index.html#setglobalobjectproperty", 
            "text": "Description :   This function is used to customize all objects\u2019 property based on the requirement at runtime.User can give his desired value as an input which will replace the matching condition in the object's property.  For more details, please refer to Help Faq Dynamic Object Handling How to change Object property at runtime?   Input Format  :Input Column : @User Defined Text String  Condition Column  : #Variable name  Example:     ObjectName  Input  Condition      Browser  @value  %var%    Browser  Sheet:Column  %var%    Browser  %dynamicVar%  %var%", 
            "title": "setglobalObjectProperty"
        }, 
        {
            "location": "/actions/webactions/index.html#setobjectproperty", 
            "text": "Description :  This function is used to customize any object property based on the requirement during the runtime. User can give a desired value as an input which will replace the matching condition in the object property.  For more details, refer to: Help Faq Dynamic Object Handling How to change Object property at runtime?  Input Format  : @User Defined Text String  Condition Column  : #Variable name  Example:     ObjectName  Input  Condition      Object  @value  %var%    Object  Sheet:Column  %var%    Object  %dynamicVar%  %var%", 
            "title": "setObjectProperty"
        }, 
        {
            "location": "/actions/webactions/index.html#checkbox", 
            "text": "", 
            "title": "Checkbox"
        }, 
        {
            "location": "/actions/webactions/index.html#uncheck", 
            "text": "Description :  This function will uncheck the specified check box.  Example:     ObjectName  Input  Condition      Object", 
            "title": "uncheck"
        }, 
        {
            "location": "/actions/webactions/index.html#checkallcheckboxes", 
            "text": "Description :  This function will check all the checkboxes on a page.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "checkAllCheckBoxes"
        }, 
        {
            "location": "/actions/webactions/index.html#check", 
            "text": "Description :  This function will check the specified checkbox element.  Example:     ObjectName  Input  Condition      Object", 
            "title": "check"
        }, 
        {
            "location": "/actions/webactions/index.html#js-commands", 
            "text": "", 
            "title": "JS Commands"
        }, 
        {
            "location": "/actions/webactions/index.html#clickbyjs", 
            "text": "Description :  This function will use JavaScript to click an object (useful when selenium functions do not work).  Example:     ObjectName  Input  Condition      Object", 
            "title": "clickByJS"
        }, 
        {
            "location": "/actions/webactions/index.html#setbyjs", 
            "text": "Description :  This function will use JavaScript to set data in an object (useful when selenium functions do not work).  Input Format  : @Expected data  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "setByJS"
        }, 
        {
            "location": "/actions/webactions/index.html#setencryptedbyjs", 
            "text": "Description :  This function will use JavaScript to set encrypted data in an object (useful when selenium functions do not work).  Input Format  : @Expected encrypted data  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "setEncryptedByJS"
        }, 
        {
            "location": "/actions/webactions/index.html#clearbyjs", 
            "text": "Description :  This function will use JavaScript to clear an objects text content  (useful when selenium functions do not work).  Example:     ObjectName  Input  Condition      Object", 
            "title": "clearByJS"
        }, 
        {
            "location": "/actions/webactions/index.html#selectbyjs", 
            "text": "Description : This function is used to select a given option from a drop down and is useful when selenium functions do not work.    Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "selectByJS"
        }, 
        {
            "location": "/actions/webactions/index.html#assertinsidebounds", 
            "text": "Description : To function is used to check if the given object is inside the boundary.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertInsideBounds"
        }, 
        {
            "location": "/actions/webactions/index.html#executeeval", 
            "text": "Description : This function is used to execute the JavaScript commands   Input Format  : @java script scripts  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "executeEval"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelement", 
            "text": "", 
            "title": "AssertElement"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementnotpresent", 
            "text": "Description : This function will check if the specified element is not present in the web page ie. In the DOM itself.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementNotPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementnotselected", 
            "text": "Description :  This function will check if the specified element is not selected  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementNotSelected"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementnotdisplayed", 
            "text": "Description : This function will check if the specified element is not displayed.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementNotDisplayed"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementnotenabled", 
            "text": "Description :  This function will check if the specified element is not enabled.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementNotEnabled"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementdisplayed", 
            "text": "Description :  This function will check if the object is displayed on web page.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementDisplayed"
        }, 
        {
            "location": "/actions/webactions/index.html#asserthscrollbarpresent", 
            "text": "Description : This function will check if horizontal scrollbar is present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "assertHScrollBarPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#asserthscrollbarnotpresent", 
            "text": "Description : This function will check if horizontal scrollbar is not present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "assertHScrollBarNotPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#assertvscrollbarpresent", 
            "text": "Description :   This function will check if vertical scrollbar is present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "assertVScrollBarPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#assertvscrollbarnotpresent", 
            "text": "Description : This function will check if vertical scrollbar is not present.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "assertVScrollBarNotPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementpresent", 
            "text": "Description :  This function will check if specified element is present in the web page ie. In the DOM of the page  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementselected", 
            "text": "Description : This function will check if the element is selected.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementSelected"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementenabled", 
            "text": "Description : This function will check if the element is enabled.  Example:     ObjectName  Input  Condition      Object", 
            "title": "assertElementEnabled"
        }, 
        {
            "location": "/actions/webactions/index.html#assertpagesource", 
            "text": "Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user.  Input Format  : @Expected PageSource content  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertPageSource"
        }, 
        {
            "location": "/actions/webactions/index.html#common-methods", 
            "text": "", 
            "title": "Common methods"
        }, 
        {
            "location": "/actions/webactions/index.html#refreshdriver", 
            "text": "Description : This function will refresh the current web page.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "refreshDriver"
        }, 
        {
            "location": "/actions/webactions/index.html#forward", 
            "text": "Description :  This function is used for navigating forward to next page.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "forward"
        }, 
        {
            "location": "/actions/webactions/index.html#submit", 
            "text": "Description :  This function will Submit an element.  Example:     ObjectName  Input  Condition      Object", 
            "title": "submit"
        }, 
        {
            "location": "/actions/webactions/index.html#dragelement", 
            "text": "Description : This function will drag the specified element(under Object column) which can be later dropped on to other element by using  dropElement .  Example:     ObjectName  Input  Condition      Object", 
            "title": "dragElement"
        }, 
        {
            "location": "/actions/webactions/index.html#dropelement", 
            "text": "Description : This function will drop the element which is dragged by using  dragElement  over the object specified here.  Example:     ObjectName  Input  Condition      Object", 
            "title": "dropElement"
        }, 
        {
            "location": "/actions/webactions/index.html#draganddropby", 
            "text": "Description : This function will drag and drop an object by specified coordinates in the input column.   Input Format  :@x-coordinate,y-coordinate  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "dragAndDropBy"
        }, 
        {
            "location": "/actions/webactions/index.html#addcookie", 
            "text": "Description :  This function will add a cookie defined in the input column.  Input Format  : @Cookie Name:Cookie Value  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "addCookie"
        }, 
        {
            "location": "/actions/webactions/index.html#back", 
            "text": "Description : This function is used for navigating to the previous page.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "back"
        }, 
        {
            "location": "/actions/webactions/index.html#pause", 
            "text": "Description :This function is used for giving a pause (Thread.sleep) in execution.  Input Format  :  @Time in miliseconds  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "pause"
        }, 
        {
            "location": "/actions/webactions/index.html#doubleclickelement", 
            "text": "Description : This function will double-click on an object.  Example:     ObjectName  Input  Condition      Object", 
            "title": "doubleClickElement"
        }, 
        {
            "location": "/actions/webactions/index.html#mouseoverelement", 
            "text": "Description : This function will perform the mouse over action on the object.  Example:     ObjectName  Input  Condition      Object", 
            "title": "mouseOverElement"
        }, 
        {
            "location": "/actions/webactions/index.html#dragtoanddropelement", 
            "text": "Description : This function is used to perform drag and drop operation. Specify the object which you want to drag, in the 'Object' column and specify the object on which you want to drop ,in the 'input' column.  Input Format  : @PageName:ObjectName(Destination)  Example:     ObjectName  Input  Condition      Object  @value", 
            "title": "dragToAndDropElement"
        }, 
        {
            "location": "/actions/webactions/index.html#releaseelement", 
            "text": "Description :  This function is used to release the element held by  clickAndHoldElement  Example:     ObjectName  Input  Condition      Object", 
            "title": "releaseElement"
        }, 
        {
            "location": "/actions/webactions/index.html#savescreenshot", 
            "text": "Description : This function will capture the screenshot and save in the specific location.  Input Format  : @File destination (eg. @D:\\filename.png)  Example:     ObjectName  Input  Condition      Browser  @value", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/actions/webactions/index.html#takescreenshot", 
            "text": "Description :  This function will take a screenshot  Example:     ObjectName  Input  Condition      Browser", 
            "title": "takeScreenshot"
        }, 
        {
            "location": "/actions/webactions/index.html#saveelementscreenshot", 
            "text": "Description : This function will take a screenshot of the web element and save it in the location specified under the Input column. If no location is specified then the default location is  your project folder\\ObjectRepository\\Pagename\\objectname .  This function can also be used to save screenshots for the entire set of page objects, under the default location which is inside the  ObjectRepository  folder.  Input Format (Optional)  : @File destination (eg. @D:\\foldername)   Example:     ObjectName  Input  Condition      Object  @File destination(optional)     Browser  @PageName from the object repository", 
            "title": "saveElementScreenshot"
        }, 
        {
            "location": "/actions/webactions/index.html#storecurrenturl", 
            "text": "Description :  This function will store the current URL into a user defined variable.  Input Format  : %variable name%  Example:     ObjectName  Input  Condition      Browser  %dynamicVar%", 
            "title": "storeCurrentUrl"
        }, 
        {
            "location": "/actions/webactions/index.html#storetextindatasheet", 
            "text": "Description : This Function will store the element's text into respective column of a given datasheet.  Input Format  : @Expected datasheet name:column name  Example:     ObjectName  Input  Condition      Object  Sheet:Column      Note : Ensure that your data sheet doesn't contain column names with spaces.", 
            "title": "storeTextinDataSheet"
        }, 
        {
            "location": "/actions/webactions/index.html#storetextpresent", 
            "text": "Description : This function will check if the element has expected text and store the flag 'True' or 'False' in the variable.  Input Format  : @Expected text  Condition  : %variable name%  Example:     ObjectName  Input  Condition      Object  @value  %var%    Object  Sheet:Column  %var%    Object  %dynamicVar%  %var%", 
            "title": "storeTextPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#storepagesource", 
            "text": "Description : This function will store the page source content into a user-defined variable.  Input Format  : %variable name%  Example:     ObjectName  Input  Condition      Browser  %variable name%", 
            "title": "storePageSource"
        }, 
        {
            "location": "/actions/webactions/index.html#storeelementselected", 
            "text": "Description :  This function will check if the element is selected and store the flag 'True' or 'False' in the variable.  Input Format  : %variable name%  Example:     ObjectName  Input  Condition      Object  %variable name%", 
            "title": "storeElementSelected"
        }, 
        {
            "location": "/actions/webactions/index.html#storeelementattribute", 
            "text": "Description :  This function will store the element's attribute value into a user-defined variable.  Input Format  : @Elements_Attribute_Name  Condition  : %variable name%  Example:     ObjectName  Input  Condition      Object  @value  %var%    Object  Sheet:Column  %var%    Object  %dynamicVar%  %var%", 
            "title": "storeElementAttribute"
        }, 
        {
            "location": "/actions/webactions/index.html#storeelementvalue", 
            "text": "Description :   This function will store the element's \u2018value\u2018 attribute into a user-defined variable.  Input Format  : %variable name%  Example:     ObjectName  Input  Condition      Object  %variable name%", 
            "title": "storeElementValue"
        }, 
        {
            "location": "/actions/webactions/index.html#storecookiepresent", 
            "text": "Description :   This function will check if the given cookie is present and store the flag 'True' or 'False' in the variable.  Input Format  : @cookieName  Condition : %variable%  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "storeCookiePresent"
        }, 
        {
            "location": "/actions/webactions/index.html#storecookiebyname", 
            "text": "Description :   This function will store the given cookie's value in the variable.  Input Format  : @cookieName   Condition : %variable%  Example:     ObjectName  Input  Condition      Browser  @value  %variable%", 
            "title": "storeCookieByName"
        }, 
        {
            "location": "/actions/webactions/index.html#storealerttext", 
            "text": "Description :   This function will store alert text into a user defined variable.  Input Format : %variable%  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "storeAlertText"
        }, 
        {
            "location": "/actions/webactions/index.html#storealertpresent", 
            "text": "Description :   This function will check if alert is present and store the flag 'True' or 'False' in a given variable.  Input Format : %variable%  Example:     ObjectName  Input  Condition      Browser  %variable%", 
            "title": "storeAlertPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#sendkeystoelement", 
            "text": "Description :  This function is used to perform keyboard events with respect to object.  Input Format  :  @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+A)   Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "sendKeysToElement"
        }, 
        {
            "location": "/actions/webactions/index.html#sendkeystowindow", 
            "text": "Description :  This function is used to perform the keyboard actions with respect to window.  Input Format  : @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+T)   Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "sendKeysToWindow"
        }, 
        {
            "location": "/actions/webactions/index.html#deletecookie", 
            "text": "Description :  This function will delete the cookie specified by the user.  Input Format  : @Cookie Name  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "deleteCookie"
        }, 
        {
            "location": "/actions/webactions/index.html#answeralert", 
            "text": "Description :  This function is used for switch control to alert and answer it.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "answerAlert"
        }, 
        {
            "location": "/actions/webactions/index.html#acceptalert", 
            "text": "Description :  This function is used for switch control to alert and accept it.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "acceptAlert"
        }, 
        {
            "location": "/actions/webactions/index.html#dismissalert", 
            "text": "Description :  This function is used to switch control to alert and  to dismiss it.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "dismissAlert"
        }, 
        {
            "location": "/actions/webactions/index.html#storevariable", 
            "text": "Description :  This function will store the given data (in the input column) into a user-defined variable.This function is same as  AddVar  action.  Input Format  : @Desired Value  Condition : %variable name%  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "storeVariable"
        }, 
        {
            "location": "/actions/webactions/index.html#storevariableindatasheet", 
            "text": "Description :  This function will store the variable's value (as given in the condition column) in the given data sheet and data column  Input Format : Sheetname:columnname  Condition : %variable name%  Example:     ObjectName  Input  Condition      Browser  Sheet:Column  %var%", 
            "title": "storeVariableInDataSheet"
        }, 
        {
            "location": "/actions/webactions/index.html#storetitle", 
            "text": "Description :   This function will store the current web page title into a user-defined variable.  Input Format  : %variable name%  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "storeTitle"
        }, 
        {
            "location": "/actions/webactions/index.html#storetext", 
            "text": "Description :  This function will store the element's text into a user-defined variable.  Input Format  : %variable name%  Example:     ObjectName  Input  Condition      Object  %dynamicVar%", 
            "title": "storeText"
        }, 
        {
            "location": "/actions/webactions/index.html#storeeval", 
            "text": "Description :  Function to store a Javascript expression's value in a variable.  For example  if you have a variable as  'a' and 'b'  and want to add them and store the sum in a variable, you can follow the following syntax.     ObjectName  Input  Condition      Browser  @var a=20;var b=30;return c=a+b;  %var%     Now the value 50(a+b), will be stored in var.  Input Format  :  javascript   Example:     ObjectName  Input  Condition      Browser  @value  %var%", 
            "title": "storeEval"
        }, 
        {
            "location": "/actions/webactions/index.html#print", 
            "text": "Description :  This function can be used for printing expected data in report.  Input Format  : @Expected Text or variable can also be printed like %var_name%  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "print"
        }, 
        {
            "location": "/actions/webactions/index.html#close", 
            "text": "Description :  This function will close the selenium Web Driver.  Example:     ObjectName  Input  Condition      Browser", 
            "title": "close"
        }, 
        {
            "location": "/actions/webactions/index.html#scroll", 
            "text": "", 
            "title": "Scroll"
        }, 
        {
            "location": "/actions/webactions/index.html#scrollhorizontallyto", 
            "text": "Description :  This function will scroll horizontally to a user defined position.  Input Format  : @left|right|number  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "scrollHorizontallyTo"
        }, 
        {
            "location": "/actions/webactions/index.html#scrollverticallyto", 
            "text": "Description :  This function will scroll vertically to a user defined position.  Input Format  : @left|right|number  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "scrollVerticallyTo"
        }, 
        {
            "location": "/actions/webactions/index.html#scrolltobottom", 
            "text": "Description :  This function will scroll to the bottom of the page  Example:     ObjectName  Input  Condition      Browser", 
            "title": "scrollToBottom"
        }, 
        {
            "location": "/actions/webactions/index.html#scrollto", 
            "text": "Description :  This function will scroll to a user specified position.   Input Format  :  @x co-ordinate,y co-ordinate  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "scrollTo"
        }, 
        {
            "location": "/actions/webactions/index.html#scrolltotop", 
            "text": "Description :  This function will scroll to the top of the page  Example:     ObjectName  Input  Condition      Browser", 
            "title": "scrollToTop"
        }, 
        {
            "location": "/actions/webactions/index.html#scrolltoleft", 
            "text": "Description :  This function will scroll to the left of the page  Example:     ObjectName  Input  Condition      Browser", 
            "title": "scrollToLeft"
        }, 
        {
            "location": "/actions/webactions/index.html#scrolltoright", 
            "text": "Description : This function will scroll to the right of the page  Example:     ObjectName  Input  Condition      Browser", 
            "title": "scrollToRight"
        }, 
        {
            "location": "/actions/webactions/index.html#assertions", 
            "text": "", 
            "title": "Assertions"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttextpresentinpage", 
            "text": "Description :  This function will search for the expected text within the html tag of the page and assert the same  Input Format  :   @Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTextPresentInPage"
        }, 
        {
            "location": "/actions/webactions/index.html#assertvariable", 
            "text": "Description :  This function will assert a stored variable's value with the value given by the user.  Input Format  : @%var_name%=Expected Value  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertVariable"
        }, 
        {
            "location": "/actions/webactions/index.html#assertcookiepresent", 
            "text": "Description : This function will assert the presence of a cookie by it's specified name and store the result in a variable.  Input Format  :   @CookieName  Example:     ObjectName  Input  Condition      Browser  @value  %variable%    Browser  Sheet:Column  %variable%    Browser  %dynamicVar%  %variable%", 
            "title": "assertCookiePresent"
        }, 
        {
            "location": "/actions/webactions/index.html#assertcookiebyname", 
            "text": "Description :  This function will assert the cookie's (the name of the cookie is given is specified in the input column) value with the one in the input column  Input Format  :   @CookieName:CookieValue  Example:     ObjectName  Input  Condition      Browser  @data", 
            "title": "assertCookieByName"
        }, 
        {
            "location": "/actions/webactions/index.html#assertalerttext", 
            "text": "Description :  This function will assert the text present in alert with the given text.  Input Format  :  @Expected Text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertAlertText"
        }, 
        {
            "location": "/actions/webactions/index.html#assertalertpresent", 
            "text": "Description :  This function will assert the presence of an alert  Example:     ObjectName  Input  Condition      Browser", 
            "title": "assertAlertPresent"
        }, 
        {
            "location": "/actions/webactions/index.html#asserteval", 
            "text": "Description :   This function will assert if the evaluated javascript expression equals the expected value provided.  Input Format  :   @javascript:expectedvalue.  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertEval"
        }, 
        {
            "location": "/actions/webactions/index.html#assertvariablefromdatasheet", 
            "text": "Description :   This function will check if the variable given in the condition column has a value equals to the value from the datasheet mentioned in the input column.   Input Format  :   Datasheet name:Column name  Condition Format : %Variable name%  Example:     ObjectName  Input  Condition      Browser  Sheet:Column  %variable%", 
            "title": "assertVariableFromDataSheet"
        }, 
        {
            "location": "/actions/webactions/index.html#title", 
            "text": "", 
            "title": "Title"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitleistartswith", 
            "text": "Description : This function will validate if the current page title begins with the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleIStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitleequals", 
            "text": "Description :  This function will validate if the title of the current page is equals the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitlecontains", 
            "text": "Description :  This function will validate if the title of the current page has the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleContains"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitlestartswith", 
            "text": "Description :   This function will validate if the title of the current page begins with the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitleendswith", 
            "text": "Description :   This function will validate if the title of the current page ends with the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitlematches", 
            "text": "Description :   This function will validate if the title current page matches  the user-provided data. You can also use regular expression in the Input field.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleMatches"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitleiequals", 
            "text": "Description :  This function will validate if the title of the current page is equals the user-provided data. This function will ignore case of user provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleIEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitleicontains", 
            "text": "Description :  This function will validate if the title of the current page contains the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleIContains"
        }, 
        {
            "location": "/actions/webactions/index.html#asserttitleiendswith", 
            "text": "Description :  This function will validate if the title of the current page ends with the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected text  Example:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertTitleIEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#attribute", 
            "text": "", 
            "title": "Attribute"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattrequals", 
            "text": "Description : This function will validate if specified attribute for an element is equal to the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattrcontains", 
            "text": "Description :  This function will validate if the specified attribute for an element contains the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrContains"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattrstartswith", 
            "text": "Description :   This function will validate if specified attribute for an element begins with the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattrendswith", 
            "text": "Description :   This function will validate if specified attribute for an element ends with user provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattrmatches", 
            "text": "Description :    This function will validate if specified attribute for an element matches with the user-provided data. You can also use regular expression in the Input field.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrMatches"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattriequals", 
            "text": "Description :    This function will validate if specified attribute for an element is equals the user-provided data.This function will ignore case of the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrIEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattricontains", 
            "text": "Description :   This function will validate if specified attribute contains user-provided data.This function will ignore case of the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrIContains"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattristartswith", 
            "text": "Description :    This function will validate if specified attribute for an element begins with the user-provided data. This function will ignore case of the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrIStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementattriendswith", 
            "text": "Description :  This function will validate if specified attribute for an element ends with the user-provided data. This function will ignore case of the user-provided data.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementAttrIEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#verifyelementattribute", 
            "text": "Description : This function will check if the value of the specified attribute of the element matches the user provided value.  Input Format  : attributeName attributeValue  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "verifyElementAttribute"
        }, 
        {
            "location": "/actions/webactions/index.html#text", 
            "text": "", 
            "title": "Text"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextequals", 
            "text": "Description :  This function will validate if a specified element text is equal to the user-provided text.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextcontains", 
            "text": "Description :  This function will check if an element text contains the expected text.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextContains"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextstartswith", 
            "text": "Description :  This function will validate if specified element text starts with user provided data.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextendswith", 
            "text": "Description :   This function will validate if the specified element text ends with user-provided data.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextmatches", 
            "text": "Description :  This function will validate if a specified element text matches with the user-provided data. You can also use regular expression in the Input field .  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextMatches"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextiequals", 
            "text": "Description :  This function will validate if a specified element text is equal to the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextIEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtexticontains", 
            "text": "Description :  This function will validate if a specified element text contains the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextIContains"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextistartswith", 
            "text": "Description : This function will validate if a specified element text begins with the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextIStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#assertelementtextiendswith", 
            "text": "Description :  This function will validate if a specified element text ends with the user-provided data. This function will ignore case of the user-provided data.  Input Format  : @Expected Text  Example:     ObjectName  Input  Condition      Object  @value     Object  Sheet:Column     Object  %dynamicVar%", 
            "title": "assertElementTextIEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#url", 
            "text": "", 
            "title": "URL"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlequals", 
            "text": "Description :This function will validate if the current URL equals the user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlcontains", 
            "text": "Description :This function will validate if the current URL has the user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlContains"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlstartswith", 
            "text": "Description :This function will validate if the current URL beings with the user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlendswith", 
            "text": "Description :This function will validate if the current URL text ends with user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlEndsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlmatches", 
            "text": "Description : This function will validate if the current URL matches with the user-provided data. You can also use regular expression in the Input field.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlMatches"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturliequals", 
            "text": "Description : This function will validate if the current URL is equal to the user-provided data. This function will ignore case of user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlIEquals"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlicontains", 
            "text": "Description : This function will validate if the current URL has the user-provided data.This function will ignore case of user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlIContains"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturlistartswith", 
            "text": "Description : This function will validate if the current URL begins with the user-provided data. This function will ignore case of user provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlIStartsWith"
        }, 
        {
            "location": "/actions/webactions/index.html#asserturliendswith", 
            "text": "Description : This function will validate if the current URL ends with the user-provided data. This function will ignore case of user-provided data.  Input Format  : @Url value   Syntax:     ObjectName  Input  Condition      Browser  @value     Browser  Sheet:Column     Browser  %dynamicVar%", 
            "title": "assertUrlIEndsWith"
        }, 
        {
            "location": "/faq/engine/index.html", 
            "text": "Engine\n#\n\n\n\n\nCognizant Intelligent Test Scripter lets users view the overall engine structure available in the installation location. This is where the methods corresponding to all the available actions are defined and this folder can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. After making modifications to the engine, the users can compile the JAR file and add it to the UI.\n\n\n\n\nHow to open the Engine in Eclipse?\n#\n\n\n\n\n\n\nOpen \nEclipse IDE\n\n\n\n\n\n\nImport project using \nFile \n Import \n Existing Projects into Workspace\n\n\n\n\n\n\nLocate the project \nEngine\n in your system.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter performing the above steps, the \nproject structure\n will look like this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere you can view the source code for every predefined action in Cognizant Intelligent Test Scripter, under the respective java class file.\n\n\nNote\n: After Importing the \nEngine\n  java project, ensure that the project is imported properly.\n\n\nFollow the steps below to check the same,\n\n\n\n\n\n\nRight-click on the Project and choose \nProperties\n from the context menu options.\n\n\n\n\n\n\nIn the Resource window, check if the eclipse project is pointing to the right  location, as shown.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: You can also check if you are working on the right Engine in case you have installed multiple versions of Cognizant Intelligent Test Scripter.\n\n\n\n\n\n\nWhere to place your custom method?\n#\n\n\nOnce you have coded your custom method, you can place them in any one of the following locations,\n\n\n\n\n\n\nYou can place your custom method in a separate \n.java\n file under any package of \nsrc\n folder in the Engine.\n\n\n\n\n\n\nYou can create a custom package in the \nEngine\n under \nsrc\n and place all your \n.java\n files containing the custom methods in it. \nThis is the best practice to add your custom method.\n\n\n\n\n\n\nYou can also create a new java project and place your methods in it under a package.\n\n\n\n\n\n\nYou can have your custom methods in a \n.java\n file saved in a separate location and inject the same in to the UI \n(Don't inject anything from the Engine project)\n\n\n\n\n\n\n\n\nHow to use your custom method from the UI?\n#\n\n\nTo use your custom method in the test case, you need to follow one of the following methods, depending on where you have place the \n.java\n files. \n\n\nMethod 1:\n\n\nIf you have a simple custom code to introduce into the UI, you can go with the \nInject script\n option.\n\n\nProcedure for injecting custom script:\n\n\n\u2022 Navigate to \nAutomation \n Inject Script\n from the menu in the UI. A new dialog box will pop up as shown below\n\n\n\n\n\u2022  The various options available in this window are described below,\n\n\n\n\nLoad Files\n: Add your custom function \n.java\n files using the \nLoad button\n or drag and drop your java files containing the custom methods\n\n\nInject Script\n:Select the files and click on inject script to inject the custom methods in those selected files\n\n\nOpen Help\n: To open the help document\n\n\nGet Sample\n: Will copy a sample code for inject script to the clip board, as shown in the prompt below,\n\n\n\n\n\n\nInject script requires \njdk\n to compile your \n.java\n files in to \n.class\n files and run the same.\n\n\nIf jdk path is not set in the \nRun.bat\n file or in the system \nPath\n variable or in \nJava_Home\n then, the following prompt will appear, to set the \njdk\n path\n\n\n\n\nIn case of any compilation errors you can watch the console section of the Inject script window.\n\n\n\n\nNote\n: After injecting your method, click on the \n icon and your custom method will be available in the UI, if you have given the \nAction\n method for validation in your custom method.\n\n\n\n\nMethod 2\n\n\nYou can also create a new java project and define your custom methods in it and export this project separately as a jar file in the location \ninstallation location\n\\lib\\commands\n\n\n\n\nIn the UI, go to \nAutomation-\nCreate CM Project\n. Give the location where the Project is to be created and click on Create Project.\n\n\n\n\n-After the project is created, import it into any IDE that supports Java. You can view the project along with the necessary dependency files as shown in the below image:\n\n\n\n\n\n\nYou can rename the project, package and class names if required.  \n\n\n\n\nAfter defining your custom method, you can simply export this project as a jar file in the location \ninstallation location\n\\lib\\commands\n.\n\n\nFollow the steps below, to do the same,\n\n\n\n\n\n\nRight-click on the \nsrc\n folder of your project and choose \nExport\n option\n\n\n\n\n\n\nSelect \njar\n option as shown below and click \nNext\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExport only the \nsrc\n folder and provide the path as \ninstallation location\n\\lib\\commands\\\n jar name \n, as shown in the image below,\n\n\n\n\n\n\n\n\nNote:\n Your custom method will be available in the UI, if you have given the \nAction\n method for validation in your custom method, after clicking on the \nReload\n icon, \n \n\n\n\n\nMethod 3\n\n\nYou can also place your custom method in the Engine and export the Engine as a Jar file again for the changes to be visible in the UI.\n\n\nFollow the steps below to export and hence replace the \ncognizant-intelligent-test-scripter-engine.jar\n in the installation location under the lib folder. \n\n\n\n\n\n\nYou can place your custom method in any package inside \nsrc\n folder or create a custom package for the same.\n\n\n\n\n\n\nAfter placing your working custom method, follow the steps below to export the \ncognizant-intelligent-test-scripter-engine.jar.jar\n \n\n\n\n\n\n\nRight-click on the \nsrc\n folder of \nEngine\n project and choose \nExport\n option\n\n\n\n\n\n\nSelect \njar\n option as shown below and click \nNext\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExport only the \nsrc\n folder and provide the path as \ninstallation location\n\\lib\\cognizant-intelligent-test-scripter-engine.jar,\n as shown in the image below,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to run/debug a test case from Engine?\n#\n\n\nIt is a best practice to run or debug your flow once from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once it is done perfectly.\n\n\nFollow the steps below to execute test case from the Engine.\n\n\nScenario 1\n\nIn case you have placed your custom method in the Engine, then follow the steps below to run from the Engine.\n\n\n\n\n\n\nOpen Eclipse \nIDE\n\n\n\n\n\n\nOpen the \nEngine\n by following the steps mentioned earlier in the section \n\"How to open the Engine in Eclipse\"\n.\n\n\n\n\n\n\nIf you have your custom method in a separate custom package, then follow the steps below to add your package name to the \npackage.properties\n file available in the installation location under the \nConfiguration\n folder, as shown in the image below,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo select the \ntestcase\n or \ntestset\n for execution, follow the steps given below.\n\n\n\n\nTo run a test case or a test set, go to the \nConfiguration\n folder available in the installation location and open the \nGlobal Settings.properties\n file.\n\n\nProvide the details as shown in the image below:\n\n\n\n\n\n\nFor executing the test case, run the \ncontrol.java\n file from the \ncom.cognizant.cognizantits.engine.core\n package.\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also keep break points wherever required and debug the test case after triggering the execution form the \ncontrol.java\n file.\n\n\n\n\nScenario 2\n\n\nIf you have placed your custom method in a separate project, then follow the steps below, to run or debug the same from the Engine,\n\n\n\n\n\n\nOpen the Engine project and your custom method containing project in eclipse IDE\n\n\n\n\n\n\nRight-click the Engine project and choose \nConfigure build path\n.\n\n\n\n\n\n\nUnder the \nprojects\n tab, click on \nAdd\n and choose the project and click on \nOK\n, as shown below\n\n\n\n\n\n\n\nAdd the name of the package containing your custom method (in the new project),  to the \npackage.properties\n file in the \nConfiguration\n folder.\n\n\n\n\n\n\nNow can debug or run the control.java file to execute your custom method from the Engine.", 
            "title": "Engine"
        }, 
        {
            "location": "/faq/engine/index.html#engine", 
            "text": "Cognizant Intelligent Test Scripter lets users view the overall engine structure available in the installation location. This is where the methods corresponding to all the available actions are defined and this folder can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. After making modifications to the engine, the users can compile the JAR file and add it to the UI.", 
            "title": "Engine"
        }, 
        {
            "location": "/faq/engine/index.html#how-to-open-the-engine-in-eclipse", 
            "text": "Open  Eclipse IDE    Import project using  File   Import   Existing Projects into Workspace    Locate the project  Engine  in your system.        After performing the above steps, the  project structure  will look like this.        Here you can view the source code for every predefined action in Cognizant Intelligent Test Scripter, under the respective java class file.  Note : After Importing the  Engine   java project, ensure that the project is imported properly.  Follow the steps below to check the same,    Right-click on the Project and choose  Properties  from the context menu options.    In the Resource window, check if the eclipse project is pointing to the right  location, as shown.        Note: You can also check if you are working on the right Engine in case you have installed multiple versions of Cognizant Intelligent Test Scripter.", 
            "title": "How to open the Engine in Eclipse?"
        }, 
        {
            "location": "/faq/engine/index.html#where-to-place-your-custom-method", 
            "text": "Once you have coded your custom method, you can place them in any one of the following locations,    You can place your custom method in a separate  .java  file under any package of  src  folder in the Engine.    You can create a custom package in the  Engine  under  src  and place all your  .java  files containing the custom methods in it.  This is the best practice to add your custom method.    You can also create a new java project and place your methods in it under a package.    You can have your custom methods in a  .java  file saved in a separate location and inject the same in to the UI  (Don't inject anything from the Engine project)", 
            "title": "Where to place your custom method?"
        }, 
        {
            "location": "/faq/engine/index.html#how-to-use-your-custom-method-from-the-ui", 
            "text": "To use your custom method in the test case, you need to follow one of the following methods, depending on where you have place the  .java  files.   Method 1:  If you have a simple custom code to introduce into the UI, you can go with the  Inject script  option.  Procedure for injecting custom script:  \u2022 Navigate to  Automation   Inject Script  from the menu in the UI. A new dialog box will pop up as shown below   \u2022  The various options available in this window are described below,   Load Files : Add your custom function  .java  files using the  Load button  or drag and drop your java files containing the custom methods  Inject Script :Select the files and click on inject script to inject the custom methods in those selected files  Open Help : To open the help document  Get Sample : Will copy a sample code for inject script to the clip board, as shown in the prompt below,    Inject script requires  jdk  to compile your  .java  files in to  .class  files and run the same.  If jdk path is not set in the  Run.bat  file or in the system  Path  variable or in  Java_Home  then, the following prompt will appear, to set the  jdk  path   In case of any compilation errors you can watch the console section of the Inject script window.   Note : After injecting your method, click on the   icon and your custom method will be available in the UI, if you have given the  Action  method for validation in your custom method.   Method 2  You can also create a new java project and define your custom methods in it and export this project separately as a jar file in the location  installation location \\lib\\commands   In the UI, go to  Automation- Create CM Project . Give the location where the Project is to be created and click on Create Project.   -After the project is created, import it into any IDE that supports Java. You can view the project along with the necessary dependency files as shown in the below image:    You can rename the project, package and class names if required.     After defining your custom method, you can simply export this project as a jar file in the location  installation location \\lib\\commands .  Follow the steps below, to do the same,    Right-click on the  src  folder of your project and choose  Export  option    Select  jar  option as shown below and click  Next        Export only the  src  folder and provide the path as  installation location \\lib\\commands\\  jar name  , as shown in the image below,     Note:  Your custom method will be available in the UI, if you have given the  Action  method for validation in your custom method, after clicking on the  Reload  icon,      Method 3  You can also place your custom method in the Engine and export the Engine as a Jar file again for the changes to be visible in the UI.  Follow the steps below to export and hence replace the  cognizant-intelligent-test-scripter-engine.jar  in the installation location under the lib folder.     You can place your custom method in any package inside  src  folder or create a custom package for the same.    After placing your working custom method, follow the steps below to export the  cognizant-intelligent-test-scripter-engine.jar.jar      Right-click on the  src  folder of  Engine  project and choose  Export  option    Select  jar  option as shown below and click  Next        Export only the  src  folder and provide the path as  installation location \\lib\\cognizant-intelligent-test-scripter-engine.jar,  as shown in the image below,", 
            "title": "How to use your custom method from the UI?"
        }, 
        {
            "location": "/faq/engine/index.html#how-to-rundebug-a-test-case-from-engine", 
            "text": "It is a best practice to run or debug your flow once from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once it is done perfectly.  Follow the steps below to execute test case from the Engine.  Scenario 1 \nIn case you have placed your custom method in the Engine, then follow the steps below to run from the Engine.    Open Eclipse  IDE    Open the  Engine  by following the steps mentioned earlier in the section  \"How to open the Engine in Eclipse\" .    If you have your custom method in a separate custom package, then follow the steps below to add your package name to the  package.properties  file available in the installation location under the  Configuration  folder, as shown in the image below,        To select the  testcase  or  testset  for execution, follow the steps given below.   To run a test case or a test set, go to the  Configuration  folder available in the installation location and open the  Global Settings.properties  file.  Provide the details as shown in the image below:    For executing the test case, run the  control.java  file from the  com.cognizant.cognizantits.engine.core  package.       You can also keep break points wherever required and debug the test case after triggering the execution form the  control.java  file.   Scenario 2  If you have placed your custom method in a separate project, then follow the steps below, to run or debug the same from the Engine,    Open the Engine project and your custom method containing project in eclipse IDE    Right-click the Engine project and choose  Configure build path .    Under the  projects  tab, click on  Add  and choose the project and click on  OK , as shown below    Add the name of the package containing your custom method (in the new project),  to the  package.properties  file in the  Configuration  folder.    Now can debug or run the control.java file to execute your custom method from the Engine.", 
            "title": "How to run/debug a test case from Engine?"
        }, 
        {
            "location": "/faq/customfunction/index.html", 
            "text": "Custom Function \n Source Code Maintenance\n#\n\n\nCognizant Intelligent Test Scripter mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new action to be implemented, for example performing PDF or Excel validation.This can be done by creating your own custom method.\n\n\nConstraints For Custom Function\n#\n\n\n\n\nAny custom function that is written to fulfill your requirements should follow the below conditions.\n\n\n\n\n\n\n\n\nCustom Functions should be \npublic\n.\n\n\n\n\n\n\nThe return type of custom function should be \nvoid\n.\n\n\n\n\n\n\nDo not provide any package declarations when you inject through \nInject Script\n.\n\n\n\n\n\n\nCustom Function should not contain parameters (use \nData\n or \nInput\n or \nCondition\n variable for fetching data from the test case).\n\n\n\n\n\n\nCustom method should contain the \nAction\n annotation in order for it to get auto suggested in the UI.\n\n\n\n\n\n\nEnsure that you import all the necessary jar files from the lib folder of the tool installation directory containing the custom method. Also, any third party libraries needed for your custom method should be referenced.\n\n\n\n\nSample Custom Method\n#\n\n\nFor creating any Custom Method, a java class is required. A sample code for understanding the usage of various variables and functions that you can access in your custom method is available in the Engine (in the file \nSampleScript.java\n under the package named \ncom.cognizant.cognizantits.engine.commands\n).", 
            "title": "Custom Methods"
        }, 
        {
            "location": "/faq/customfunction/index.html#custom-function-source-code-maintenance", 
            "text": "Cognizant Intelligent Test Scripter mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new action to be implemented, for example performing PDF or Excel validation.This can be done by creating your own custom method.", 
            "title": "Custom Function &amp; Source Code Maintenance"
        }, 
        {
            "location": "/faq/customfunction/index.html#constraints-for-custom-function", 
            "text": "Any custom function that is written to fulfill your requirements should follow the below conditions.     Custom Functions should be  public .    The return type of custom function should be  void .    Do not provide any package declarations when you inject through  Inject Script .    Custom Function should not contain parameters (use  Data  or  Input  or  Condition  variable for fetching data from the test case).    Custom method should contain the  Action  annotation in order for it to get auto suggested in the UI.    Ensure that you import all the necessary jar files from the lib folder of the tool installation directory containing the custom method. Also, any third party libraries needed for your custom method should be referenced.", 
            "title": "Constraints For Custom Function"
        }, 
        {
            "location": "/faq/customfunction/index.html#sample-custom-method", 
            "text": "For creating any Custom Method, a java class is required. A sample code for understanding the usage of various variables and functions that you can access in your custom method is available in the Engine (in the file  SampleScript.java  under the package named  com.cognizant.cognizantits.engine.commands ).", 
            "title": "Sample Custom Method"
        }, 
        {
            "location": "/faq/addon/index.html", 
            "text": "Addon Usage\n#\n\n\nError in Connection\n#\n\n\nFollow the below steps for such scenario:\n\n\nChecking Connection status and establishing the same\n\n\nFor Chrome and Firefox:\n\n\nFollow the steps below to troubleshoot the \"error in Connection\" error message,\n\n\n\n\n\n\nOpen the \noptions window\n, \nright-click\n the add-on to launch options window in \nchrome\n and use the shortcut \nCtrl+Shift+O\n in firefox for the same.\n\n\n\n\n\n\nLaunch \nspy or heal or record\n from the UI\n\n\n\n\n\n\nClick on \nTest Connection\n, use the default port \n8887\n, this port can also be changed as per your choice.\n\n\n\n\n\n\nIf you are getting a \nred bulb\n, the certificate is not installed properly, so click on the bulb again, you will be navigated to the url \nhttps://localhost:8887/status\n, you need to give \"\nProceed to unsafe\n\" in chrome and \nAdd exception\n in Firefox to get to this link, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you do not get this message then you need to install the certificates manually.\n\n\n\n\n\n\nNOTE\n: A green bulb indicates that the connection between browser extension and the UI is established and is working fine.\n\n\nNOTE\n: For IE, you need to launch the record or spy or heal from the the UI and \nlaunch\n the URL \nhttps://localhost:8887/status\n to see the above \nconnected\n. If you do not get the above message then you need to install the certificate manually.\n\n\n\n\nIf the issue\n, still persists, then do the following steps,\n\n\n\n\n\n\nConfiguring Proxy Setting\n\n\n\n\nIf you are behind any proxy then add \nlocalhost\n in the Exceptions.  \n\n\n\n\n\n\n\n\nChanging Java Version\n\n\n\n\n\n\nIf the above troubleshooting didn't help you. please update your System Java version by updating System Java Path to latest Java\n\n\n\n\nGo to \nlocation Where Java is installed\njava\njdkx.x.x_xx\njre\nbin and copy the path\n\n\nClick on Windows \nStartButton\nComputer\nRightClick\nProperties\nAdvance system settings\nEnvironmentvariables\n under system variable append the path copied in step to the PATH environment variable.\n\n\n\n\n\n\n\n\nAfter updating Java path restart Cognizant Intelligent Test Scripter.\n\n\n\n\n\n\nCheck the connection status and establish the same once again", 
            "title": "Addon Usage"
        }, 
        {
            "location": "/faq/addon/index.html#addon-usage", 
            "text": "", 
            "title": "Addon Usage"
        }, 
        {
            "location": "/faq/addon/index.html#error-in-connection", 
            "text": "Follow the below steps for such scenario:  Checking Connection status and establishing the same  For Chrome and Firefox:  Follow the steps below to troubleshoot the \"error in Connection\" error message,    Open the  options window ,  right-click  the add-on to launch options window in  chrome  and use the shortcut  Ctrl+Shift+O  in firefox for the same.    Launch  spy or heal or record  from the UI    Click on  Test Connection , use the default port  8887 , this port can also be changed as per your choice.    If you are getting a  red bulb , the certificate is not installed properly, so click on the bulb again, you will be navigated to the url  https://localhost:8887/status , you need to give \" Proceed to unsafe \" in chrome and  Add exception  in Firefox to get to this link,         If you do not get this message then you need to install the certificates manually.    NOTE : A green bulb indicates that the connection between browser extension and the UI is established and is working fine.  NOTE : For IE, you need to launch the record or spy or heal from the the UI and  launch  the URL  https://localhost:8887/status  to see the above  connected . If you do not get the above message then you need to install the certificate manually.   If the issue , still persists, then do the following steps,    Configuring Proxy Setting   If you are behind any proxy then add  localhost  in the Exceptions.       Changing Java Version    If the above troubleshooting didn't help you. please update your System Java version by updating System Java Path to latest Java   Go to  location Where Java is installed java jdkx.x.x_xx jre bin and copy the path  Click on Windows  StartButton Computer RightClick Properties Advance system settings Environmentvariables  under system variable append the path copied in step to the PATH environment variable.     After updating Java path restart Cognizant Intelligent Test Scripter.    Check the connection status and establish the same once again", 
            "title": "Error in Connection"
        }, 
        {
            "location": "/shortcuts/index.html", 
            "text": "Shortcuts\n#\n\n\n\n\nFile Menu\n#\n\n\n\n\n\n\n\n\nShortcut Keys\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCtrl + Shift + N\n\n\nCreate a new project\n\n\n\n\n\n\nCtrl +Shift+ O\n\n\nOpen an existing project\n\n\n\n\n\n\nCtrl +Shift+ S\n\n\nSave All\n\n\n\n\n\n\nF1\n\n\nOpen Help File\n\n\n\n\n\n\n\n\nNavigation\n#\n\n\n\n\n\n\n\n\nShortcut Keys\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAlt+ shift + N\n\n\nNavigate to TEST DESIGN panel\n\n\n\n\n\n\nAlt+ shift + E\n\n\nNavigate to TEST EXECUTION panel\n\n\n\n\n\n\nAlt+ shift + D\n\n\nNavigate to DASHBOARD\n\n\n\n\n\n\nAlt+ shift + A\n\n\nAdjust UI\n\n\n\n\n\n\n\n\nWorkspace\n#\n\n\n\n\n\n\n\n\nShortcut Keys\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCtrl + Plus\n\n\nAdd row\n\n\n\n\n\n\nCtrl + Minus\n\n\nDelete rows\n\n\n\n\n\n\nCtrl + B\n\n\nToggle Breakpoint\n\n\n\n\n\n\nCtrl + /\n\n\nToggle Comment\n\n\n\n\n\n\n\n\nTest Data Table\n#\n\n\n\n\n\n\n\n\nShortcut Keys\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCtrl + Plus\n\n\nAdd Row\n\n\n\n\n\n\nCtrl + Minus\n\n\nRemove Row\n\n\n\n\n\n\nLeft Double Click\n\n\nEdit header/ cell data\n\n\n\n\n\n\n\n\nCommon\n#\n\n\n\n\n\n\n\n\nShortcut Keys\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nF2\n\n\nRename\n\n\n\n\n\n\nDel\n\n\nDelete\n\n\n\n\n\n\nCtrl + X\n\n\nCut\n\n\n\n\n\n\nCtrl + C\n\n\nCopy\n\n\n\n\n\n\nCtrl + V\n\n\nPaste\n\n\n\n\n\n\n\n\nOthers\n#\n\n\n\n\n\n\n\n\nShortcut Keys\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nF9\n\n\nshow Log\n\n\n\n\n\n\nCtrl + Shift + E\n\n\nLaunch Exploratory Ribbon\n\n\n\n\n\n\nCtrl+ Alt + S\n\n\nOpen Run settings", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/shortcuts/index.html#shortcuts", 
            "text": "", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/shortcuts/index.html#file-menu", 
            "text": "Shortcut Keys  Description      Ctrl + Shift + N  Create a new project    Ctrl +Shift+ O  Open an existing project    Ctrl +Shift+ S  Save All    F1  Open Help File", 
            "title": "File Menu"
        }, 
        {
            "location": "/shortcuts/index.html#navigation", 
            "text": "Shortcut Keys  Description      Alt+ shift + N  Navigate to TEST DESIGN panel    Alt+ shift + E  Navigate to TEST EXECUTION panel    Alt+ shift + D  Navigate to DASHBOARD    Alt+ shift + A  Adjust UI", 
            "title": "Navigation"
        }, 
        {
            "location": "/shortcuts/index.html#workspace", 
            "text": "Shortcut Keys  Description      Ctrl + Plus  Add row    Ctrl + Minus  Delete rows    Ctrl + B  Toggle Breakpoint    Ctrl + /  Toggle Comment", 
            "title": "Workspace"
        }, 
        {
            "location": "/shortcuts/index.html#test-data-table", 
            "text": "Shortcut Keys  Description      Ctrl + Plus  Add Row    Ctrl + Minus  Remove Row    Left Double Click  Edit header/ cell data", 
            "title": "Test Data Table"
        }, 
        {
            "location": "/shortcuts/index.html#common", 
            "text": "Shortcut Keys  Description      F2  Rename    Del  Delete    Ctrl + X  Cut    Ctrl + C  Copy    Ctrl + V  Paste", 
            "title": "Common"
        }, 
        {
            "location": "/shortcuts/index.html#others", 
            "text": "Shortcut Keys  Description      F9  show Log    Ctrl + Shift + E  Launch Exploratory Ribbon    Ctrl+ Alt + S  Open Run settings", 
            "title": "Others"
        }
    ]
}